(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\u000aWatson gives to Sherlock two strings S1 and S2 consisting of uppercase English alphabets. Next he wants Sherlock to build a flower in the following way:\u000aHe puts both strings perpendicular to each other in such a way that they overlap at the same character. For example, if he has two strings "ABCDEF" and "XXBCZQ", one possible way to make a flower is:\u000a          A\u000a          B \u000aX X B C  Z  Q\u000a          D\u000a          E\u000a          F\u000aLength of petals in the above flower are 2, 2, 3 and 3.\u000aA flower's ugliness is sum of absolute difference of adjacent petal lengths i.e. i.e. if adjacent petal lengths are L1, L2, L3, L4, then ugliness of flower is |L1 - L2| + |L2 - L3| + |L3 - L4| + |L4 - L1|.\u000aSherlock wants to find minimum value of ugliness if we consider all possible flower configurations. Note that a configuration is valid even if any of the petal length is 0.\u000aInput\u000aFirst line contains T, number of test cases. Each test case consists of string S1 in one line followed by string S2 in the next line. It is guaranteed that there exists at least one possible way to make a flower.\u000aOutput\u000aFor each test case, output in one line the required answer.\u000aConstraints\u000a1 \u2264 T \u2264 10\u000a1 \u2264 length(S1), length(S2) \u2264 105\u000aExample\u000aInput:\u000a2\u000aABCDE\u000aXXBCZQ\u000aBBB\u000aBBBBBB\u000a\u000aOutput: \u000a2\u000a6\u000aExplanation\u000aTest case 1:\u000aIf we keep the configuration shown in statement, the ugliness is 2, which is minimum possible.\u000a\u000aTest case 2:\u000aOne of the best configurations is\u000a       B \u000aB B B  B  B B\u000a       B\u000a\u000awhere petal lengths are 1, 3, 1, 2.\u000aAuthor: darkshadows\u000aTags: binary-search cook75 darkshadows easy-medium\u000aDate Added: 27-09-2016\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\u000aWatson gives to Sherlock two strings S1 and S2 consisting of uppercase English alphabets. Next he wants Sherlock to build a flower in the following way:\u000aHe puts both strings perpendicular to each other in such a way that they overlap at the same character. For example, if he has two strings "ABCDEF" and "XXBCZQ", one possible way to make a flower is:\u000a          A\u000a          B \u000aX X B C  Z  Q\u000a          D\u000a          E\u000a          F\u000aLength of petals in the above flower are 2, 2, 3 and 3.\u000aA flower's ugliness is sum of absolute difference of adjacent petal lengths i.e. i.e. if adjacent petal lengths are L1, L2, L3, L4, then ugliness of flower is |L1 - L2| + |L2 - L3| + |L3 - L4| + |L4 - L1|.\u000aSherlock wants to find minimum value of ugliness if we consider all possible flower configurations. Note that a configuration is valid even if any of the petal length is 0.\u000aInput\u000aFirst line contains T, number of test cases. Each test case consists of string S1 in one line followed by string S2 in the next line. It is guaranteed that there exists at least one possible way to make a flower.\u000aOutput\u000aFor each test case, output in one line the required answer.\u000aConstraints\u000a1 \u2264 T \u2264 10\u000a1 \u2264 length(S1), length(S2) \u2264 105\u000aExample\u000aInput:\u000a2\u000aABCDE\u000aXXBCZQ\u000aBBB\u000aBBBBBB\u000a\u000aOutput: \u000a2\u000a6\u000aExplanation\u000aTest case 1:\u000aIf we keep the configuration shown in statement, the ugliness is 2, which is minimum possible.\u000a\u000aTest case 2:\u000aOne of the best configurations is\u000a       B \u000aB B B  B  B B\u000a       B\u000a\u000awhere petal lengths are 1, 3, 1, 2.\u000aAuthor: darkshadows\u000aTags: binary-search cook75 darkshadows easy-medium\u000aDate Added: 27-09-2016\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Mandarin Chinese Russian Vietnamese Watson gives to Sherlock two strings S1 and S2 consisting of uppercase English alphabets. Next he wants Sherlock to build a flower in the following way: S1 1 S2 2  He puts both strings perpendicular to each other in such a way that they overlap at the same character. For example, if he has two strings "ABCDEF" and "XXBCZQ", one possible way to make a flower is: ABCDEF XXBCZQ           A\u000a          B \u000aX X B C  Z  Q\u000a          D\u000a          E\u000a          F           A\u000a          B \u000aX X B C  Z  Q\u000a          D\u000a          E\u000a          F Length of petals in the above flower are 2, 2, 3 and 3. A flower's ugliness is sum of absolute difference of adjacent petal lengths i.e. i.e. if adjacent petal lengths are L1, L2, L3, L4, then ugliness of flower is |L1 - L2| + |L2 - L3| + |L3 - L4| + |L4 - L1|. i.e. i.e. L1, L2, L3, L4 1 2 3 4 |L1 - L2| + |L2 - L3| + |L3 - L4| + |L4 - L1|. 1 2 2 3 3 4 4 1 Sherlock wants to find minimum value of ugliness if we consider all possible flower configurations. Note that a configuration is valid even if any of the petal length is 0. Input First line contains T, number of test cases. Each test case consists of string S1 in one line followed by string S2 in the next line. It is guaranteed that there exists at least one possible way to make a flower. T S1 1 S2 2 Output For each test case, output in one line the required answer. Constraints 1 \u2264 T \u2264 10\u000a1 \u2264 length(S1), length(S2) \u2264 105 1 \u2264 T \u2264 10 1 T 10 1 \u2264 length(S1), length(S2) \u2264 105 1 length(S1), length(S2) 1 2 105 5 Example Input:\u000a2\u000aABCDE\u000aXXBCZQ\u000aBBB\u000aBBBBBB\u000a\u000aOutput: \u000a2\u000a6 Input: Output: Explanation Test case 1:\u000aIf we keep the configuration shown in statement, the ugliness is 2, which is minimum possible.\u000a\u000aTest case 2:\u000aOne of the best configurations is            B \u000aB B B  B  B B\u000a       B\u000a\u000awhere petal lengths are 1, 3, 1, 2.        B \u000aB B B  B  B B\u000a       B   Author: darkshadows\u000aTags: binary-search cook75 darkshadows easy-medium\u000aDate Added: 27-09-2016\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: darkshadows\u000aTags: binary-search cook75 darkshadows easy-medium\u000aDate Added: 27-09-2016\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: darkshadows Author: darkshadows darkshadows Tags: binary-search cook75 darkshadows easy-medium Tags: binary-search cook75 darkshadows easy-medium binary-search cook75 darkshadows easy-medium Date Added: 27-09-2016 Date Added: 27-09-2016 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V binary-search cook75 darkshadows easy-medium
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/UGLYF
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.
p17
aVWatson gives to Sherlock two strings S1 and S2 consisting of uppercase English alphabets. Next he wants Sherlock to build a flower in the following way:
p18
aVHe puts both strings perpendicular to each other in such a way that they overlap at the same character. For example, if he has two strings "ABCDEF" and "XXBCZQ", one possible way to make a flower is:
p19
aVA
p20
aVB
p21
aVX X B C  Z  Q
p22
aVD
p23
aVE
p24
aVF
p25
aVLength of petals in the above flower are 2, 2, 3 and 3.
p26
aVA flower's ugliness is sum of absolute difference of adjacent petal lengths i.e. i.e. if adjacent petal lengths are L1, L2, L3, L4, then ugliness of flower is |L1 - L2| + |L2 - L3| + |L3 - L4| + |L4 - L1|.
p27
aVSherlock wants to find minimum value of ugliness if we consider all possible flower configurations. Note that a configuration is valid even if any of the petal length is 0.
p28
asS'input'
p29
(lp30
VInput
p31
aVFirst line contains T, number of test cases. Each test case consists of string S1 in one line followed by string S2 in the next line. It is guaranteed that there exists at least one possible way to make a flower.
p32
aVOutput
p33
aVFor each test case, output in one line the required answer.
p34
asS'constraints'
p35
(lp36
VConstraints
p37
aV1 \u2264 T \u2264 10
p38
aV1 \u2264 length(S1), length(S2) \u2264 105
p39
asS'id'
p40
c__builtin__
id
p41
sS'name'
p42
VUGLYF
p43
sb.