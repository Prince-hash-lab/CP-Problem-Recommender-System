(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\u000aOne day, Devu and Churu were involved in a light discussion about finding the diameter of an undirected unweighted connected graph. Diameter of a graph is the maximum value of pairwise shortest distances over all pairs of vertices of the graph. Churu proposed the following algorithm which takes a parameter start_vertex.\u000aAlgorithm (start_vertex):\u000a find out the set of vertices S having maximum value of \u000a  shortest distance from start_vertex.\u000a ans = 0;\u000a for each vertex v in S\u000a  temp = 0;\u000a  for each vertex u in graph G:\u000a   temp = max(temp, shortest distance between u and v).\u000a  ans = max(ans, temp);\u000a return ans;\u000aWhen Devu heard this algorithm, he exclaimed: "What, this does not seem to be correct!". Churu challenged him to give a counter example to disprove the algorithm. You have to help Devu come up with a graph as a counter example to the above algorithm, if one exists.\u000aFormally, You will be given an integer n denoting the number of nodes of the expected graph (counter example Devu is producing). The graph should be undirected, unweighted and connected. The actual diameter of the graph should not be equal to the one returned by the Churu's proposed algorithm. If for the given n, there does not exist any such graph which could act as counter example, print -1.\u000aInput\u000aThe first line of input contains a single integer T denoting number of test cases. Description of T test cases follows.\u000aOnly line of each test case contains a single integer n as defined in the problem statement.\u000aOutput\u000aFor each test case, first line should contain the number of edges in the counter-example graph, or -1 if no counter-example exists.\u000aIf a counter example exists, then:\u000aPrint a single line containing an integer m denoting the number of edges in the desired graph\u000aPrint m lines, each line should contain two integers u and v (1-based indexing) denoting an edge of the graph. You should make sure that no two edges in the graph repeat, and that the graph is connected.\u000aIn the next line, print a single integer denoting start_vertex (1-based indexing) passed to the algorithm.\u000aConstraints\u000a1 \u2264 T, n \u2264 50\u000aSubtask\u000aThere is only a single subtask worth 100 points with above mentioned constraints.\u000aExample\u000aInput:\u000a2\u000a2\u000a10\u000aOutput:\u000a-1\u000a9\u000a1 2\u000a2 3\u000a3 4\u000a4 5\u000a5 6\u000a6 7\u000a7 8\u000a8 9\u000a9 10\u000a7\u000aExplanation\u000aExample case 1. There can be only one connected graph of 2 nodes. (i.e. 1 is connected to 2). Diameter returned by algorithm for any start vertex will be 1 which is equal to the actual diameter. So answer is -1.\u000aExample case 2. Please note that example given for n = 10 is not a correct counter example. It is only given so as to clarify the input output format. In the example, first line contains 9 denoting the number of edges in the graph. Then 9 edges of the graph are given. The graph is connected. Then the last line specifies the value of start_vertex passed (that is, 7) to Churu's algorithm.\u000aAuthor: admin2\u000aTester: iscsi\u000aEditorial: http://discuss.codechef.com/problems/DEVLDISC\u000aTags: ad-hoc admin2 feb16 graph simple\u000aDate Added: 3-03-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\u000aOne day, Devu and Churu were involved in a light discussion about finding the diameter of an undirected unweighted connected graph. Diameter of a graph is the maximum value of pairwise shortest distances over all pairs of vertices of the graph. Churu proposed the following algorithm which takes a parameter start_vertex.\u000aAlgorithm (start_vertex):\u000a find out the set of vertices S having maximum value of \u000a  shortest distance from start_vertex.\u000a ans = 0;\u000a for each vertex v in S\u000a  temp = 0;\u000a  for each vertex u in graph G:\u000a   temp = max(temp, shortest distance between u and v).\u000a  ans = max(ans, temp);\u000a return ans;\u000aWhen Devu heard this algorithm, he exclaimed: "What, this does not seem to be correct!". Churu challenged him to give a counter example to disprove the algorithm. You have to help Devu come up with a graph as a counter example to the above algorithm, if one exists.\u000aFormally, You will be given an integer n denoting the number of nodes of the expected graph (counter example Devu is producing). The graph should be undirected, unweighted and connected. The actual diameter of the graph should not be equal to the one returned by the Churu's proposed algorithm. If for the given n, there does not exist any such graph which could act as counter example, print -1.\u000aInput\u000aThe first line of input contains a single integer T denoting number of test cases. Description of T test cases follows.\u000aOnly line of each test case contains a single integer n as defined in the problem statement.\u000aOutput\u000aFor each test case, first line should contain the number of edges in the counter-example graph, or -1 if no counter-example exists.\u000aIf a counter example exists, then:\u000aPrint a single line containing an integer m denoting the number of edges in the desired graph\u000aPrint m lines, each line should contain two integers u and v (1-based indexing) denoting an edge of the graph. You should make sure that no two edges in the graph repeat, and that the graph is connected.\u000aIn the next line, print a single integer denoting start_vertex (1-based indexing) passed to the algorithm.\u000aConstraints\u000a1 \u2264 T, n \u2264 50\u000aSubtask\u000aThere is only a single subtask worth 100 points with above mentioned constraints.\u000aExample\u000aInput:\u000a2\u000a2\u000a10\u000aOutput:\u000a-1\u000a9\u000a1 2\u000a2 3\u000a3 4\u000a4 5\u000a5 6\u000a6 7\u000a7 8\u000a8 9\u000a9 10\u000a7\u000aExplanation\u000aExample case 1. There can be only one connected graph of 2 nodes. (i.e. 1 is connected to 2). Diameter returned by algorithm for any start vertex will be 1 which is equal to the actual diameter. So answer is -1.\u000aExample case 2. Please note that example given for n = 10 is not a correct counter example. It is only given so as to clarify the input output format. In the example, first line contains 9 denoting the number of edges in the graph. Then 9 edges of the graph are given. The graph is connected. Then the last line specifies the value of start_vertex passed (that is, 7) to Churu's algorithm.\u000aAuthor: admin2\u000aTester: iscsi\u000aEditorial: http://discuss.codechef.com/problems/DEVLDISC\u000aTags: ad-hoc admin2 feb16 graph simple\u000aDate Added: 3-03-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Mandarin Chinese Russian Vietnamese One day, Devu and Churu were involved in a light discussion about finding the diameter of an undirected unweighted connected graph. Diameter of a graph is the maximum value of pairwise shortest distances over all pairs of vertices of the graph. Churu proposed the following algorithm which takes a parameter start_vertex. start_vertex start_vertex Algorithm (start_vertex):\u000a find out the set of vertices S having maximum value of \u000a  shortest distance from start_vertex.\u000a ans = 0;\u000a for each vertex v in S\u000a  temp = 0;\u000a  for each vertex u in graph G:\u000a   temp = max(temp, shortest distance between u and v).\u000a  ans = max(ans, temp);\u000a return ans; Algorithm (start_vertex):\u000a find out the set of vertices S having maximum value of \u000a  shortest distance from start_vertex.\u000a ans = 0;\u000a for each vertex v in S\u000a  temp = 0;\u000a  for each vertex u in graph G:\u000a   temp = max(temp, shortest distance between u and v).\u000a  ans = max(ans, temp);\u000a return ans; start_vertex S start_vertex S  When Devu heard this algorithm, he exclaimed: "What, this does not seem to be correct!". Churu challenged him to give a counter example to disprove the algorithm. You have to help Devu come up with a graph as a counter example to the above algorithm, if one exists. Formally, You will be given an integer n denoting the number of nodes of the expected graph (counter example Devu is producing). The graph should be undirected, unweighted and connected. The actual diameter of the graph should not be equal to the one returned by the Churu's proposed algorithm. If for the given n, there does not exist any such graph which could act as counter example, print -1. n n Input The first line of input contains a single integer T denoting number of test cases. Description of T test cases follows.\u000aOnly line of each test case contains a single integer n as defined in the problem statement. The first line of input contains a single integer T denoting number of test cases. Description of T test cases follows. T T Only line of each test case contains a single integer n as defined in the problem statement. n Output For each test case, first line should contain the number of edges in the counter-example graph, or -1 if no counter-example exists.\u000aIf a counter example exists, then:\u000aPrint a single line containing an integer m denoting the number of edges in the desired graph\u000aPrint m lines, each line should contain two integers u and v (1-based indexing) denoting an edge of the graph. You should make sure that no two edges in the graph repeat, and that the graph is connected.\u000aIn the next line, print a single integer denoting start_vertex (1-based indexing) passed to the algorithm. For each test case, first line should contain the number of edges in the counter-example graph, or -1 if no counter-example exists. Print a single line containing an integer m denoting the number of edges in the desired graph m Print m lines, each line should contain two integers u and v (1-based indexing) denoting an edge of the graph. You should make sure that no two edges in the graph repeat, and that the graph is connected. m u v In the next line, print a single integer denoting start_vertex (1-based indexing) passed to the algorithm. start_vertex start_vertex Constraints 1 \u2264 T, n \u2264 50 1 \u2264 T, n \u2264 50 1 \u2264 T, n \u2264 50 Subtask Example Input:\u000a2\u000a2\u000a10\u000aOutput:\u000a-1\u000a9\u000a1 2\u000a2 3\u000a3 4\u000a4 5\u000a5 6\u000a6 7\u000a7 8\u000a8 9\u000a9 10\u000a7 Input: Output: Explanation Example case 1. There can be only one connected graph of 2 nodes. (i.e. 1 is connected to 2). Diameter returned by algorithm for any start vertex will be 1 which is equal to the actual diameter. So answer is -1. Example case 1. Example case 2. Please note that example given for n = 10 is not a correct counter example. It is only given so as to clarify the input output format. In the example, first line contains 9 denoting the number of edges in the graph. Then 9 edges of the graph are given. The graph is connected. Then the last line specifies the value of start_vertex passed (that is, 7) to Churu's algorithm. Example case 2. n = 10 not a correct counter example 9 9 start_vertex start_vertex 7  Author: admin2\u000aTester: iscsi\u000aEditorial: http://discuss.codechef.com/problems/DEVLDISC\u000aTags: ad-hoc admin2 feb16 graph simple\u000aDate Added: 3-03-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: admin2\u000aTester: iscsi\u000aEditorial: http://discuss.codechef.com/problems/DEVLDISC\u000aTags: ad-hoc admin2 feb16 graph simple\u000aDate Added: 3-03-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: admin2 Author: admin2 admin2 Tester: iscsi Tester: iscsi iscsi Editorial: http://discuss.codechef.com/problems/DEVLDISC Editorial: http://discuss.codechef.com/problems/DEVLDISC http://discuss.codechef.com/problems/DEVLDISC Tags: ad-hoc admin2 feb16 graph simple Tags: ad-hoc admin2 feb16 graph simple ad-hoc admin2 feb16 graph simple Date Added: 3-03-2015 Date Added: 3-03-2015 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V ad-hoc admin2 feb16 graph simple
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/DEVLDISC
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.
p17
aVOne day, Devu and Churu were involved in a light discussion about finding the diameter of an undirected unweighted connected graph. Diameter of a graph is the maximum value of pairwise shortest distances over all pairs of vertices of the graph. Churu proposed the following algorithm which takes a parameter start_vertex.
p18
aVAlgorithm (start_vertex):
p19
aVfind out the set of vertices S having maximum value of
p20
aVshortest distance from start_vertex.
p21
aVans = 0;
p22
aVfor each vertex v in S
p23
aVtemp = 0;
p24
aVfor each vertex u in graph G:
p25
aVtemp = max(temp, shortest distance between u and v).
p26
aVans = max(ans, temp);
p27
aVreturn ans;
p28
aVWhen Devu heard this algorithm, he exclaimed: "What, this does not seem to be correct!". Churu challenged him to give a counter example to disprove the algorithm. You have to help Devu come up with a graph as a counter example to the above algorithm, if one exists.
p29
aVFormally, You will be given an integer n denoting the number of nodes of the expected graph (counter example Devu is producing). The graph should be undirected, unweighted and connected. The actual diameter of the graph should not be equal to the one returned by the Churu's proposed algorithm. If for the given n, there does not exist any such graph which could act as counter example, print -1.
p30
asS'input'
p31
(lp32
VInput
p33
aVThe first line of input contains a single integer T denoting number of test cases. Description of T test cases follows.
p34
aVOnly line of each test case contains a single integer n as defined in the problem statement.
p35
aVOutput
p36
aVFor each test case, first line should contain the number of edges in the counter-example graph, or -1 if no counter-example exists.
p37
aVIf a counter example exists, then:
p38
aVPrint a single line containing an integer m denoting the number of edges in the desired graph
p39
aVPrint m lines, each line should contain two integers u and v (1-based indexing) denoting an edge of the graph. You should make sure that no two edges in the graph repeat, and that the graph is connected.
p40
aVIn the next line, print a single integer denoting start_vertex (1-based indexing) passed to the algorithm.
p41
asS'constraints'
p42
(lp43
VConstraints
p44
aV1 \u2264 T, n \u2264 50
p45
aVSubtask
p46
aVThere is only a single subtask worth 100 points with above mentioned constraints.
p47
asS'id'
p48
c__builtin__
id
p49
sS'name'
p50
VDEVLDISC
p51
sb.