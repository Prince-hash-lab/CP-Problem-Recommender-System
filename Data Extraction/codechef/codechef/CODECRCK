(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aRead problems statements in Mandarin and Russian.Translations in Vietnamese to be uploaded soon.\u000aWet Shark once had 2 sequences:\u000a{a_n}= {a_1, a_2, a_3, ... , a_(109)}\u000a{b_n} = {b_1, b_2, b_3, ... , b_(109)}\u000aHowever, he only kept one element from each sequence. Luckily, both the elements that Wet Shark kept have the same index in Wet Shark's sequences: that is, he took a_i and b_i for some 1 \u2264 i \u2264 109.\u000aRight after Wet Shark loses his sequences, he finds that he actually needs them to break the code of Cthulhu to escape a labyrinth. Cthulhu's code is a single floating point number Q. However, the code verifier is faulty. If Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to escape.\u000aWet Shark now starts to panic, and consults Dry Dolphin for help via ultrasonic waves. After the Dry Dolphin Sequence Processing Factory processes data of Wet Shark's sequences, the machines give Wet Shark the following 2 relations his sequences follow for all 1 \u2264 n < 109, where x = sqrt(2) and y = sqrt(3).\u000aWet Shark is now clueless on how to compute anything, and asks you for help.\u000aWet Shark has discovered that Cthulhu's code is actually defined as Q = (a_k + b_k) / (2^s), where s is a predetermined number, k is the index of another element in Wet Shark's sequence, and a_k, b_k are precisely the kth elements of Wet Shark's sequences {a_n} and {b_n}, respectively.\u000aGiven k, i, and the 2 elements of the arrays Wet Shark has lost, find any value of the code c that will allow Wet Shark to exit Cthulhu's labyrinth.\u000aInput\u000aThe first line of input contains 3 space separated integers i, k, s \u2014 the common index of the two elements Wet Shark kept, the index of Wet Shark's array needed to break Cthulhu's code, and the number s described in the problem statement, respectively. It is guaranteed that Cthulhu's code, Q, is between -109 and 109 (both inclusive).\u000aThe second line of the input contains 2 space separated integers a_i and b_i, representing the ith element of sequence {a_n} and the ith element of sequence {b_n}, respectively.\u000aOutput\u000aOutput any number c that will crack Cthulhu's code. Recall that if Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to exit the labyrinth.\u000aConstraints\u000aSUBTASK 1: 20 POINTS\u000a1 \u2264 i \u2264 103\u000a1 \u2264 k \u2264 103\u000a-103 \u2264 s \u2264 103\u000a1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009103\u000a\u000aSUBTASK 2: 80 POINTS\u000a1 \u2264 i \u2264 1010\u000a1 \u2264 k \u2264 1010\u000a-1010 \u2264 s \u2264 1010\u000a1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u20091010\u000aIt is guaranteed that -1010 \u2264\u2009Q \u2264\u2009 1010.\u000aExample\u000aInput:\u000a1 1 5\u000a4 5\u000a\u000aOutput:\u000a0.28125\u000aExplanation\u000aExample case 1. In this case, a_1 = 4, b_1 = 5, and s = 5. Cthulhu's code in this case is (a_1 + b_1) / (2s) = 9/32 = 0.28125.\u000aAuthor: minimario\u000aTester: kevinsogo\u000aEditorial: http://discuss.codechef.com/problems/CODECRCK\u000aTags: easy-medium math minimario sept15\u000aDate Added: 26-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aRead problems statements in Mandarin and Russian.Translations in Vietnamese to be uploaded soon.\u000aWet Shark once had 2 sequences:\u000a{a_n}= {a_1, a_2, a_3, ... , a_(109)}\u000a{b_n} = {b_1, b_2, b_3, ... , b_(109)}\u000aHowever, he only kept one element from each sequence. Luckily, both the elements that Wet Shark kept have the same index in Wet Shark's sequences: that is, he took a_i and b_i for some 1 \u2264 i \u2264 109.\u000aRight after Wet Shark loses his sequences, he finds that he actually needs them to break the code of Cthulhu to escape a labyrinth. Cthulhu's code is a single floating point number Q. However, the code verifier is faulty. If Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to escape.\u000aWet Shark now starts to panic, and consults Dry Dolphin for help via ultrasonic waves. After the Dry Dolphin Sequence Processing Factory processes data of Wet Shark's sequences, the machines give Wet Shark the following 2 relations his sequences follow for all 1 \u2264 n < 109, where x = sqrt(2) and y = sqrt(3).\u000aWet Shark is now clueless on how to compute anything, and asks you for help.\u000aWet Shark has discovered that Cthulhu's code is actually defined as Q = (a_k + b_k) / (2^s), where s is a predetermined number, k is the index of another element in Wet Shark's sequence, and a_k, b_k are precisely the kth elements of Wet Shark's sequences {a_n} and {b_n}, respectively.\u000aGiven k, i, and the 2 elements of the arrays Wet Shark has lost, find any value of the code c that will allow Wet Shark to exit Cthulhu's labyrinth.\u000aInput\u000aThe first line of input contains 3 space separated integers i, k, s \u2014 the common index of the two elements Wet Shark kept, the index of Wet Shark's array needed to break Cthulhu's code, and the number s described in the problem statement, respectively. It is guaranteed that Cthulhu's code, Q, is between -109 and 109 (both inclusive).\u000aThe second line of the input contains 2 space separated integers a_i and b_i, representing the ith element of sequence {a_n} and the ith element of sequence {b_n}, respectively.\u000aOutput\u000aOutput any number c that will crack Cthulhu's code. Recall that if Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to exit the labyrinth.\u000aConstraints\u000aSUBTASK 1: 20 POINTS\u000a1 \u2264 i \u2264 103\u000a1 \u2264 k \u2264 103\u000a-103 \u2264 s \u2264 103\u000a1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009103\u000a\u000aSUBTASK 2: 80 POINTS\u000a1 \u2264 i \u2264 1010\u000a1 \u2264 k \u2264 1010\u000a-1010 \u2264 s \u2264 1010\u000a1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u20091010\u000aIt is guaranteed that -1010 \u2264\u2009Q \u2264\u2009 1010.\u000aExample\u000aInput:\u000a1 1 5\u000a4 5\u000a\u000aOutput:\u000a0.28125\u000aExplanation\u000aExample case 1. In this case, a_1 = 4, b_1 = 5, and s = 5. Cthulhu's code in this case is (a_1 + b_1) / (2s) = 9/32 = 0.28125.\u000aAuthor: minimario\u000aTester: kevinsogo\u000aEditorial: http://discuss.codechef.com/problems/CODECRCK\u000aTags: easy-medium math minimario sept15\u000aDate Added: 26-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. Read problems statements in Mandarin and Russian.Translations in Vietnamese to be uploaded soon. Mandarin Russian Wet Shark once had 2 sequences: {a_n}= {a_1, a_2, a_3, ... , a_(109)}\u000a{b_n} = {b_1, b_2, b_3, ... , b_(109)} {a_n}= {a_1, a_2, a_3, ... , a_(109)} 9  {b_n} = {b_1, b_2, b_3, ... , b_(109)} 9 However, he only kept one element from each sequence. Luckily, both the elements that Wet Shark kept have the same index in Wet Shark's sequences: that is, he took a_i and b_i for some 1 \u2264 i \u2264 109. a_i b_i 1 \u2264 i \u2264 109 9 Right after Wet Shark loses his sequences, he finds that he actually needs them to break the code of Cthulhu to escape a labyrinth. Cthulhu's code is a single floating point number Q. However, the code verifier is faulty. If Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to escape. Cthulhu Q c |c - Q| \u2264 0.01 Wet Shark now starts to panic, and consults Dry Dolphin for help via ultrasonic waves. After the Dry Dolphin Sequence Processing Factory processes data of Wet Shark's sequences, the machines give Wet Shark the following 2 relations his sequences follow for all 1 \u2264 n < 109, where x = sqrt(2) and y = sqrt(3). 9 x = sqrt(2) y = sqrt(3)   Wet Shark is now clueless on how to compute anything, and asks you for help. Wet Shark has discovered that Cthulhu's code is actually defined as Q = (a_k + b_k) / (2^s), where s is a predetermined number, k is the index of another element in Wet Shark's sequence, and a_k, b_k are precisely the kth elements of Wet Shark's sequences {a_n} and {b_n}, respectively. Q = (a_k + b_k) / (2^s) s k a_k b_k k th {a_n} {b_n} Given k, i, and the 2 elements of the arrays Wet Shark has lost, find any value of the code c that will allow Wet Shark to exit Cthulhu's labyrinth. k i c Input The first line of input contains 3 space separated integers i, k, s \u2014 the common index of the two elements Wet Shark kept, the index of Wet Shark's array needed to break Cthulhu's code, and the number s described in the problem statement, respectively. It is guaranteed that Cthulhu's code, Q, is between -109 and 109 (both inclusive). i, k, s s 9 9 The second line of the input contains 2 space separated integers a_i and b_i, representing the ith element of sequence {a_n} and the ith element of sequence {b_n}, respectively. a_i b_i i th {a_n} i th {b_n} Output Output any number c that will crack Cthulhu's code. Recall that if Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to exit the labyrinth. c c |c - Q| \u2264 0.01 Constraints SUBTASK 1: 20 POINTS\u000a1 \u2264 i \u2264 103\u000a1 \u2264 k \u2264 103\u000a-103 \u2264 s \u2264 103\u000a1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009103\u000a\u000aSUBTASK 2: 80 POINTS\u000a1 \u2264 i \u2264 1010\u000a1 \u2264 k \u2264 1010\u000a-1010 \u2264 s \u2264 1010\u000a1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u20091010 SUBTASK 1: 20 POINTS SUBTASK 1: 20 POINTS 1 \u2264 i \u2264 103 1 \u2264 i \u2264 103 3 1 \u2264 k \u2264 103 1 \u2264 k \u2264 103 3 -103 \u2264 s \u2264 103 -103 \u2264 s \u2264 103 3 3 1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009103 1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009103 3   SUBTASK 2: 80 POINTS SUBTASK 2: 80 POINTS 1 \u2264 i \u2264 1010 1 \u2264 i \u2264 1010 10 1 \u2264 k \u2264 1010 1 \u2264 k \u2264 1010 10 -1010 \u2264 s \u2264 1010 -1010 \u2264 s \u2264 1010 10 10 1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u20091010 1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u20091010 10 It is guaranteed that -1010 \u2264\u2009Q \u2264\u2009 1010. 10 10 Example Input:\u000a1 1 5\u000a4 5\u000a\u000aOutput:\u000a0.28125 Input: Output: Explanation Example case 1. In this case, a_1 = 4, b_1 = 5, and s = 5. Cthulhu's code in this case is (a_1 + b_1) / (2s) = 9/32 = 0.28125. Example case 1. a_1 b_1 s a_1 b_1 s  Author: minimario\u000aTester: kevinsogo\u000aEditorial: http://discuss.codechef.com/problems/CODECRCK\u000aTags: easy-medium math minimario sept15\u000aDate Added: 26-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: minimario\u000aTester: kevinsogo\u000aEditorial: http://discuss.codechef.com/problems/CODECRCK\u000aTags: easy-medium math minimario sept15\u000aDate Added: 26-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: minimario Author: minimario minimario Tester: kevinsogo Tester: kevinsogo kevinsogo Editorial: http://discuss.codechef.com/problems/CODECRCK Editorial: http://discuss.codechef.com/problems/CODECRCK http://discuss.codechef.com/problems/CODECRCK Tags: easy-medium math minimario sept15 Tags: easy-medium math minimario sept15 easy-medium math minimario sept15 Date Added: 26-07-2015 Date Added: 26-07-2015 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V easy-medium math minimario sept15
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/CODECRCK
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVRead problems statements in Mandarin and Russian.Translations in Vietnamese to be uploaded soon.
p17
aVWet Shark once had 2 sequences:
p18
aV{a_n}= {a_1, a_2, a_3, ... , a_(109)}
p19
aV{b_n} = {b_1, b_2, b_3, ... , b_(109)}
p20
aVHowever, he only kept one element from each sequence. Luckily, both the elements that Wet Shark kept have the same index in Wet Shark's sequences: that is, he took a_i and b_i for some 1 \u2264 i \u2264 109.
p21
aVRight after Wet Shark loses his sequences, he finds that he actually needs them to break the code of Cthulhu to escape a labyrinth. Cthulhu's code is a single floating point number Q. However, the code verifier is faulty. If Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to escape.
p22
aVWet Shark now starts to panic, and consults Dry Dolphin for help via ultrasonic waves. After the Dry Dolphin Sequence Processing Factory processes data of Wet Shark's sequences, the machines give Wet Shark the following 2 relations his sequences follow for all 1 \u2264 n < 109, where x = sqrt(2) and y = sqrt(3).
p23
aVWet Shark is now clueless on how to compute anything, and asks you for help.
p24
aVWet Shark has discovered that Cthulhu's code is actually defined as Q = (a_k + b_k) / (2^s), where s is a predetermined number, k is the index of another element in Wet Shark's sequence, and a_k, b_k are precisely the kth elements of Wet Shark's sequences {a_n} and {b_n}, respectively.
p25
aVGiven k, i, and the 2 elements of the arrays Wet Shark has lost, find any value of the code c that will allow Wet Shark to exit Cthulhu's labyrinth.
p26
asS'input'
p27
(lp28
VInput
p29
aVThe first line of input contains 3 space separated integers i, k, s \u2014 the common index of the two elements Wet Shark kept, the index of Wet Shark's array needed to break Cthulhu's code, and the number s described in the problem statement, respectively. It is guaranteed that Cthulhu's code, Q, is between -109 and 109 (both inclusive).
p30
aVThe second line of the input contains 2 space separated integers a_i and b_i, representing the ith element of sequence {a_n} and the ith element of sequence {b_n}, respectively.
p31
aVOutput
p32
aVOutput any number c that will crack Cthulhu's code. Recall that if Wet Shark enters any code c such that |c - Q| \u2264 0.01 , Cthulhu's code checker will allow him to exit the labyrinth.
p33
asS'constraints'
p34
(lp35
VConstraints
p36
aVSUBTASK 1: 20 POINTS
p37
aV1 \u2264 i \u2264 103
p38
aV1 \u2264 k \u2264 103
p39
aV-103 \u2264 s \u2264 103
p40
aV1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u2009103
p41
aV
p42
aVSUBTASK 2: 80 POINTS
p43
aV1 \u2264 i \u2264 1010
p44
aV1 \u2264 k \u2264 1010
p45
aV-1010 \u2264 s \u2264 1010
p46
aV1\u2009\u2264\u2009a_i,\u2009b_i\u2009\u2264\u20091010
p47
aVIt is guaranteed that -1010 \u2264\u2009Q \u2264\u2009 1010.
p48
asS'id'
p49
c__builtin__
id
p50
sS'name'
p51
VCODECRCK
p52
sb.