(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\u000aChef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations:\u000aAdd some value to ith element of the array\u000aCalculate sum of all elements on any prefix of the array\u000aBoth operations take O(log N) time. This data structure is also well known for its low memory usage. To be more precise, it needs exactly the same amount of memory as that of array.\u000aGiven some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here "&" denotes bitwise AND operation.\u000aSo, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out.\u000aSince Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3.\u000aInput\u000aThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\u000aThe only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive.\u000aOutput\u000aFor each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL.\u000aConstraints\u000a1 \u2264 T \u2264 300\u000a1 \u2264 Length(Li) \u2264 1000\u000a1 \u2264 N \u2264 106\u000aSubtasks\u000aSubtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60\u000aSubtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100\u000aSubtask #3 (50 points): No additional constraints\u000aExample\u000aInput:\u000a4\u000a001 100 011 4\u000a1000 1101 100 3\u000a1010 001 101 4\u000a010 101 000 4\u000a\u000aOutput:\u000a6\u000a12\u000a8\u000a10\u000aAuthor: cenadar\u000aTester: alex_2oo8\u000aEditorial: http://discuss.codechef.com/problems/FENWITER\u000aTags: bit cenadar easy oct16\u000aDate Added: 16-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.\u000aChef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations:\u000aAdd some value to ith element of the array\u000aCalculate sum of all elements on any prefix of the array\u000aBoth operations take O(log N) time. This data structure is also well known for its low memory usage. To be more precise, it needs exactly the same amount of memory as that of array.\u000aGiven some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here "&" denotes bitwise AND operation.\u000aSo, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out.\u000aSince Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3.\u000aInput\u000aThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.\u000aThe only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive.\u000aOutput\u000aFor each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL.\u000aConstraints\u000a1 \u2264 T \u2264 300\u000a1 \u2264 Length(Li) \u2264 1000\u000a1 \u2264 N \u2264 106\u000aSubtasks\u000aSubtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60\u000aSubtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100\u000aSubtask #3 (50 points): No additional constraints\u000aExample\u000aInput:\u000a4\u000a001 100 011 4\u000a1000 1101 100 3\u000a1010 001 101 4\u000a010 101 000 4\u000a\u000aOutput:\u000a6\u000a12\u000a8\u000a10\u000aAuthor: cenadar\u000aTester: alex_2oo8\u000aEditorial: http://discuss.codechef.com/problems/FENWITER\u000aTags: bit cenadar easy oct16\u000aDate Added: 16-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. Read problems statements in Mandarin Chinese, Russian and Vietnamese as well. Mandarin Chinese Russian Vietnamese Chef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations: Fenwick tree N Add some value to ith element of the array\u000aCalculate sum of all elements on any prefix of the array Add some value to ith element of the array i th Calculate sum of all elements on any prefix of the array  Given some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here "&" denotes bitwise AND operation. A T Ti i Astart start Astart + 1 start + 1 Ai i start start = Fdown(i) = (i & (i + 1)) down bitwise AND operation AND So, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out. A0 0 A1 1 AL L L TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1 L Fdown(L)-1 down Fdown(Fdown(L)-1)-1 down down Fdown(Fdown(...(Fdown(L)-1)-1)-1 down down down L 0 down A0 0 A1 1 A2 2 AL L O(log L) T Since Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3. L L1 1 L2 2 N L3 3 Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. T T The only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive. L1 1 L2 2 L3 3 N 0 1 L L1 1 L2 2 N L3 3 Output For each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL. T A0 0 A1 1 A2 2 AL L Constraints 1 \u2264 T \u2264 300\u000a1 \u2264 Length(Li) \u2264 1000\u000a1 \u2264 N \u2264 106 1 \u2264 T \u2264 300 1 T 300 1 \u2264 Length(Li) \u2264 1000 1 Length(Li) i 1000 1 \u2264 N \u2264 106 1 N 106 6 Subtasks Subtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60\u000aSubtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100\u000aSubtask #3 (50 points): No additional constraints Subtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60 |L1| + |L2| * N + |L3| \u2264 60 1 2 3 Subtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100 Subtask #3 (50 points): No additional constraints No additional constraints Example Input:\u000a4\u000a001 100 011 4\u000a1000 1101 100 3\u000a1010 001 101 4\u000a010 101 000 4\u000a\u000aOutput:\u000a6\u000a12\u000a8\u000a10 Input: Output:  Author: cenadar\u000aTester: alex_2oo8\u000aEditorial: http://discuss.codechef.com/problems/FENWITER\u000aTags: bit cenadar easy oct16\u000aDate Added: 16-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: cenadar\u000aTester: alex_2oo8\u000aEditorial: http://discuss.codechef.com/problems/FENWITER\u000aTags: bit cenadar easy oct16\u000aDate Added: 16-07-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: cenadar Author: cenadar cenadar Tester: alex_2oo8 Tester: alex_2oo8 alex_2oo8 Editorial: http://discuss.codechef.com/problems/FENWITER Editorial: http://discuss.codechef.com/problems/FENWITER http://discuss.codechef.com/problems/FENWITER Tags: bit cenadar easy oct16 Tags: bit cenadar easy oct16 bit cenadar easy oct16 Date Added: 16-07-2015 Date Added: 16-07-2015 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V bit cenadar easy oct16
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/FENWITER
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVRead problems statements in Mandarin Chinese, Russian and Vietnamese as well.
p17
aVChef has just learned a new data structure - Fenwick tree. This data structure holds information about array of N elements and can process two types of operations:
p18
aVAdd some value to ith element of the array
p19
aVCalculate sum of all elements on any prefix of the array
p20
aVBoth operations take O(log N) time. This data structure is also well known for its low memory usage. To be more precise, it needs exactly the same amount of memory as that of array.
p21
aVGiven some array A, first we build data structure in some other array T. Ti stores the sum of the elements Astart, Astart + 1, ..., Ai. Index start is calculated with formula start = Fdown(i) = (i & (i + 1)). Here "&" denotes bitwise AND operation.
p22
aVSo, in order to find a sum of elements A0, A1, ..., AL you start with index L and calculate sum of TL + TFdown(L)-1 + TFdown(Fdown(L)-1)-1 + ... + TFdown(Fdown(...(Fdown(L)-1)-1)-1. Usually it is performed with cycle that goes from L down to 0 with function Fdown and sums some elements from T. Chef wants to verify that the time complexity to calculate sum of A0, A1, A2, ..., AL is O(log L). In order to do so, he wonders how many times he has to access array T to calculate this sum. Help him to find this out.
p23
aVSince Chef works with really big indices. The value of L can be very large and is provided to you in binary representation as concatenation of strings L1, L2 repeated N times and string L3.
p24
asS'input'
p25
(lp26
VInput
p27
aVThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.
p28
aVThe only line of each test case contains three non-empty strings L1, L2, L3 and an integer N. Strings will contain only characters 0 and 1. To obtain binary representation of index L concatenate L1 with L2 repeated N times and with L3. You are guaranteed that the index will be positive.
p29
aVOutput
p30
aVFor each test case, output a single line containing number of times Fenwick tree data structure will access array T in order to compute sum of A0, A1, A2, ..., AL.
p31
asS'constraints'
p32
(lp33
VConstraints
p34
aV1 \u2264 T \u2264 300
p35
aV1 \u2264 Length(Li) \u2264 1000
p36
aV1 \u2264 N \u2264 106
p37
aVSubtasks
p38
aVSubtask #1 (20 points): |L1| + |L2| * N + |L3| \u2264 60
p39
aVSubtask #2 (30 points): 1 \u2264 T \u2264 30, 1 \u2264 N \u2264 100
p40
aVSubtask #3 (50 points): No additional constraints
p41
asS'id'
p42
c__builtin__
id
p43
sS'name'
p44
VFENWITER
p45
sb.