(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese and Russian.\u000aAditi recently discovered a new magic trick. First, she gives you an integer N and asks you to think an integer between 1 and N. Then she gives you a bundle of cards each having a sorted list (in ascending order) of some distinct integers written on it. The integers in all the lists are between 1 and N. Note that the same integer may appear in more than one card. Now, she shows you these cards one by one and asks whether the number you thought is written on the card or not. After that, she immediately tells you the integer you had thought of.\u000aSeeing you thoroughly puzzled, she explains that she can apply the trick so fast because she is just adding the first integer written on the cards that contain the integer you had thought of, and then gives the sum as the answer. She calls a bundle interesting if when the bundle is lexicographically sorted, no two consecutive cards have any number in common. Now she challenges you to find out the minimum number of cards she will need for making an interesting bundle such that the magic trick will work every time.\u000aInput\u000aThe first line of the input contains an integer T denoting the number of test cases.\u000aEach test case contains a line with a single integer N.\u000aOutput\u000aFor each test case, output a line containing a single integer denoting the minimum number of cards required.\u000aConstraints\u000a1 \u2264 T \u2264 105\u000a1 \u2264 N \u2264 1018\u000aSub tasks\u000aSubtask #1: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 (5 points)\u000aSubtask #2: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 (10 points)\u000aSubtask #3: Original Constraints (85 points)\u000aExample\u000aInput:\u000a2\u000a1\u000a4\u000a\u000aOutput:\u000a1\u000a3\u000aExplanation\u000aIn example 1, only 1 card containing {1} will work.\u000aIn example 2, make 3 cards containing {1,4}, {2} and {3,4}.\u000aAssume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1.\u000aAssume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2.\u000aAssume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3.\u000aAssume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it.\u000aThus her trick will work well in every case. And we can check it easily that the cards are sorted in lexicographical order and two consecutive cards have no common integers.\u000aAuthor: abhra73\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/ADMAG\u000aTags: abhra73 aug15 fibonacci simple zeckendorf\u000aDate Added: 29-06-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese and Russian.\u000aAditi recently discovered a new magic trick. First, she gives you an integer N and asks you to think an integer between 1 and N. Then she gives you a bundle of cards each having a sorted list (in ascending order) of some distinct integers written on it. The integers in all the lists are between 1 and N. Note that the same integer may appear in more than one card. Now, she shows you these cards one by one and asks whether the number you thought is written on the card or not. After that, she immediately tells you the integer you had thought of.\u000aSeeing you thoroughly puzzled, she explains that she can apply the trick so fast because she is just adding the first integer written on the cards that contain the integer you had thought of, and then gives the sum as the answer. She calls a bundle interesting if when the bundle is lexicographically sorted, no two consecutive cards have any number in common. Now she challenges you to find out the minimum number of cards she will need for making an interesting bundle such that the magic trick will work every time.\u000aInput\u000aThe first line of the input contains an integer T denoting the number of test cases.\u000aEach test case contains a line with a single integer N.\u000aOutput\u000aFor each test case, output a line containing a single integer denoting the minimum number of cards required.\u000aConstraints\u000a1 \u2264 T \u2264 105\u000a1 \u2264 N \u2264 1018\u000aSub tasks\u000aSubtask #1: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 (5 points)\u000aSubtask #2: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 (10 points)\u000aSubtask #3: Original Constraints (85 points)\u000aExample\u000aInput:\u000a2\u000a1\u000a4\u000a\u000aOutput:\u000a1\u000a3\u000aExplanation\u000aIn example 1, only 1 card containing {1} will work.\u000aIn example 2, make 3 cards containing {1,4}, {2} and {3,4}.\u000aAssume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1.\u000aAssume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2.\u000aAssume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3.\u000aAssume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it.\u000aThus her trick will work well in every case. And we can check it easily that the cards are sorted in lexicographical order and two consecutive cards have no common integers.\u000aAuthor: abhra73\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/ADMAG\u000aTags: abhra73 aug15 fibonacci simple zeckendorf\u000aDate Added: 29-06-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. Read problems statements in Mandarin Chinese and Russian. Mandarin Chinese Russian Aditi recently discovered a new magic trick. First, she gives you an integer N and asks you to think an integer between 1 and N. Then she gives you a bundle of cards each having a sorted list (in ascending order) of some distinct integers written on it. The integers in all the lists are between 1 and N. Note that the same integer may appear in more than one card. Now, she shows you these cards one by one and asks whether the number you thought is written on the card or not. After that, she immediately tells you the integer you had thought of. N 1 N 1 N Seeing you thoroughly puzzled, she explains that she can apply the trick so fast because she is just adding the first integer written on the cards that contain the integer you had thought of, and then gives the sum as the answer. She calls a bundle interesting if when the bundle is lexicographically sorted, no two consecutive cards have any number in common. Now she challenges you to find out the minimum number of cards she will need for making an interesting bundle such that the magic trick will work every time. interesting interesting Input The first line of the input contains an integer T denoting the number of test cases.\u000aEach test case contains a line with a single integer N. The first line of the input contains an integer T denoting the number of test cases. T Each test case contains a line with a single integer N. N Output For each test case, output a line containing a single integer denoting the minimum number of cards required. For each test case, output a line containing a single integer denoting the minimum number of cards required. Constraints 1 \u2264 T \u2264 105\u000a1 \u2264 N \u2264 1018 1 \u2264 T \u2264 105 1 \u2264 T \u2264 105 5 1 \u2264 N \u2264 1018 1 \u2264 N \u2264 1018 18 Sub tasks Subtask #1: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 (5 points)\u000aSubtask #2: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 (10 points)\u000aSubtask #3: Original Constraints (85 points) Subtask #1: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 (5 points) 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 Subtask #2: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 (10 points) 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 Subtask #3: Original Constraints (85 points) Example Input:\u000a2\u000a1\u000a4\u000a\u000aOutput:\u000a1\u000a3 Input: Output: Explanation In example 1, only 1 card containing {1} will work.\u000aIn example 2, make 3 cards containing {1,4}, {2} and {3,4}.\u000aAssume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1.\u000aAssume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2.\u000aAssume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3.\u000aAssume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it.\u000aThus her trick will work well in every case. And we can check it easily that the cards are sorted in lexicographical order and two consecutive cards have no common integers. In example 1, only 1 card containing {1} will work. In example 1 1 {1} In example 2, make 3 cards containing {1,4}, {2} and {3,4}.\u000aAssume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1.\u000aAssume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2.\u000aAssume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3.\u000aAssume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it.\u000aThus her trick will work well in every case. And we can check it easily that the cards are sorted in lexicographical order and two consecutive cards have no common integers. In example 2 3 {1,4}, {2} {3,4} Assume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1.\u000aAssume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2.\u000aAssume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3.\u000aAssume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it. Assume you thought of 1, then you will select the 1st card {1,4}, then she will correctly figure out the integer you thought being 1. 1 st {1,4} 1 Assume you thought of 2, then you will select the 2nd card {2}, then she will correctly figure out the integer you thought being 2. 2 nd {2} 2 Assume you thought of 3, then you will select the 3rd card {3,4}, then she will correctly figure out the integer you thought being 3. 3 rd {3,4} 3 Assume you thought of 4, then you will select 1st card {1,4} and 3rd card {3,4}, then she will calculate the sum of the first integers of the two card 1 + 3 = 4, and she will answer it. 4 st {1,4} rd {3,4} 1 + 3 = 4 Thus her trick will work well in every case. And we can check it easily that the cards are sorted in lexicographical order and two consecutive cards have no common integers. lexicographical order  Author: abhra73\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/ADMAG\u000aTags: abhra73 aug15 fibonacci simple zeckendorf\u000aDate Added: 29-06-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: abhra73\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/ADMAG\u000aTags: abhra73 aug15 fibonacci simple zeckendorf\u000aDate Added: 29-06-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: abhra73 Author: abhra73 abhra73 Tester: laycurse Tester: laycurse laycurse Editorial: http://discuss.codechef.com/problems/ADMAG Editorial: http://discuss.codechef.com/problems/ADMAG http://discuss.codechef.com/problems/ADMAG Tags: abhra73 aug15 fibonacci simple zeckendorf Tags: abhra73 aug15 fibonacci simple zeckendorf abhra73 aug15 fibonacci simple zeckendorf Date Added: 29-06-2015 Date Added: 29-06-2015 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V abhra73 aug15 fibonacci simple zeckendorf
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/ADMAG
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVRead problems statements in Mandarin Chinese and Russian.
p17
aVAditi recently discovered a new magic trick. First, she gives you an integer N and asks you to think an integer between 1 and N. Then she gives you a bundle of cards each having a sorted list (in ascending order) of some distinct integers written on it. The integers in all the lists are between 1 and N. Note that the same integer may appear in more than one card. Now, she shows you these cards one by one and asks whether the number you thought is written on the card or not. After that, she immediately tells you the integer you had thought of.
p18
aVSeeing you thoroughly puzzled, she explains that she can apply the trick so fast because she is just adding the first integer written on the cards that contain the integer you had thought of, and then gives the sum as the answer. She calls a bundle interesting if when the bundle is lexicographically sorted, no two consecutive cards have any number in common. Now she challenges you to find out the minimum number of cards she will need for making an interesting bundle such that the magic trick will work every time.
p19
asS'input'
p20
(lp21
VInput
p22
aVThe first line of the input contains an integer T denoting the number of test cases.
p23
aVEach test case contains a line with a single integer N.
p24
aVOutput
p25
aVFor each test case, output a line containing a single integer denoting the minimum number of cards required.
p26
asS'constraints'
p27
(lp28
VConstraints
p29
aV1 \u2264 T \u2264 105
p30
aV1 \u2264 N \u2264 1018
p31
aVSub tasks
p32
aVSubtask #1: 1 \u2264 T \u2264 10, 1 \u2264 N \u2264 10 (5 points)
p33
aVSubtask #2: 1 \u2264 T \u2264 100, 1 \u2264 N \u2264 1000 (10 points)
p34
aVSubtask #3: Original Constraints (85 points)
p35
asS'id'
p36
c__builtin__
id
p37
sS'name'
p38
VADMAG
p39
sb.