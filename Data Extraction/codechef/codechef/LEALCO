(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aThe Little Elephant and his friends from the Zoo of Lviv were returning from the party. But suddenly they were stopped by the policeman Big Hippo, who wanted to make an alcohol test for elephants.\u000aThere were N elephants ordered from the left to the right in a row and numbered from 0 to N-1. Let R[i] to be the result of breathalyzer test of i-th elephant.\u000aConsidering current laws in the Zoo, elephants would be arrested if there exists K consecutive elephants among them for which at least M of these K elephants have the maximal test result among these K elephants.\u000aUsing poor math notations we can alternatively define this as follows. The elephants would be arrested if there exists i from 0 to N-K, inclusive, such that for at least M different values of j from i to i+K-1, inclusive, we have R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.\u000aThe Big Hippo is very old and the Little Elephant can change some of the results. In a single operation he can add 1 to the result of any elephant. But for each of the elephants he can apply this operation at most once.\u000aWhat is the minimum number of operations that the Little Elephant needs to apply, such that the sequence of results, after all operations will be applied, let elephants to avoid the arrest? If it is impossible to avoid the arrest applying any number of operations, output -1.\u000aInput\u000aThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, K, M. The second line contains N space-separated integers R[0], R[1], ..., R[N-1] denoting the test results of the elephants.\u000aOutput\u000aFor each test case, output a single line containing the minimum number of operations needed to avoid the arrest.\u000aConstraints\u000a1 \u2264 T \u2264 10\u000a1 \u2264 M \u2264 K \u2264 N \u2264 17\u000a1 \u2264 R[i] \u2264 17\u000aExample\u000aInput:\u000a4\u000a5 3 2\u000a1 3 1 2 1\u000a5 3 3\u000a7 7 7 7 7\u000a5 3 3\u000a7 7 7 8 8\u000a4 3 1\u000a1 3 1 2\u000a\u000aOutput:\u000a0\u000a1\u000a1\u000a-1\u000aExplanation\u000aExample case 1. Let's follow the poor math definition of arrest. We will consider all values of i from 0 to N-K = 2, inclusive, and should count the number of values of j described in the definition. If it less than M = 2 then this value of i does not cause the arrest, otherwise causes.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {1, 3, 1} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=1 {3, 1, 2} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=2 {1, 2, 1} max = 2 R[j] = 2 for j = 3 does not cause the arrest\u000aSo we see that initial test results of the elephants do not cause their arrest. Hence the Little Elephant does not need to apply any operations. Therefore, the answer is 0.\u000aExample case 2.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 7} max = 7 R[j] = 7 for j = 1, 2, 3 causes the arrest\u000ai=2 {7, 7, 7} max = 7 R[j] = 7 for j = 2, 3, 4 causes the arrest\u000aSo we see that for initial test results of the elephants each value of i causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[2]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 7, 8, 7, 7}. Let's check that now elephants will be not arrested.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 8} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=1 {7, 8, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=2 {8, 7, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000aSo we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1.\u000aExample case 3.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 8} max = 8 R[j] = 8 for j = 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest\u000aSo we see that for initial test results of the elephants the value of i = 0 causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[1]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 8, 7, 8, 8}. Let's check that now elephants will be not arrested.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 8, 7} max = 8 R[j] = 8 for j = 1 does not cause the arrest\u000ai=1 {8, 7, 8} max = 8 R[j] = 8 for j = 1, 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest\u000aSo we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1. Note that if we increase by 1 the result R[2] instead of R[1] then the value i = 2 will cause the arrest since {R[2], R[3], R[4]} will be {8, 8, 8} after this operation and we will have 3 values of j from 2 to 4, inclusive, for which R[j] = max{R[2], R[3], R[4]}, namely, j = 2, 3, 4.\u000aExample case 4. When M = 1 the Little Elephant can't reach the goal since for each value of i from 0 to N-K we have at least one value of j for which R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.\u000aAuthor: witua\u000aTester: anton_lunyov\u000aEditorial: http://discuss.codechef.com/problems/LEALCO\u000aTags: backtracking bitmasking easy jan13 witua\u000aDate Added: 20-03-2012\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aThe Little Elephant and his friends from the Zoo of Lviv were returning from the party. But suddenly they were stopped by the policeman Big Hippo, who wanted to make an alcohol test for elephants.\u000aThere were N elephants ordered from the left to the right in a row and numbered from 0 to N-1. Let R[i] to be the result of breathalyzer test of i-th elephant.\u000aConsidering current laws in the Zoo, elephants would be arrested if there exists K consecutive elephants among them for which at least M of these K elephants have the maximal test result among these K elephants.\u000aUsing poor math notations we can alternatively define this as follows. The elephants would be arrested if there exists i from 0 to N-K, inclusive, such that for at least M different values of j from i to i+K-1, inclusive, we have R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.\u000aThe Big Hippo is very old and the Little Elephant can change some of the results. In a single operation he can add 1 to the result of any elephant. But for each of the elephants he can apply this operation at most once.\u000aWhat is the minimum number of operations that the Little Elephant needs to apply, such that the sequence of results, after all operations will be applied, let elephants to avoid the arrest? If it is impossible to avoid the arrest applying any number of operations, output -1.\u000aInput\u000aThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, K, M. The second line contains N space-separated integers R[0], R[1], ..., R[N-1] denoting the test results of the elephants.\u000aOutput\u000aFor each test case, output a single line containing the minimum number of operations needed to avoid the arrest.\u000aConstraints\u000a1 \u2264 T \u2264 10\u000a1 \u2264 M \u2264 K \u2264 N \u2264 17\u000a1 \u2264 R[i] \u2264 17\u000aExample\u000aInput:\u000a4\u000a5 3 2\u000a1 3 1 2 1\u000a5 3 3\u000a7 7 7 7 7\u000a5 3 3\u000a7 7 7 8 8\u000a4 3 1\u000a1 3 1 2\u000a\u000aOutput:\u000a0\u000a1\u000a1\u000a-1\u000aExplanation\u000aExample case 1. Let's follow the poor math definition of arrest. We will consider all values of i from 0 to N-K = 2, inclusive, and should count the number of values of j described in the definition. If it less than M = 2 then this value of i does not cause the arrest, otherwise causes.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {1, 3, 1} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=1 {3, 1, 2} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=2 {1, 2, 1} max = 2 R[j] = 2 for j = 3 does not cause the arrest\u000aSo we see that initial test results of the elephants do not cause their arrest. Hence the Little Elephant does not need to apply any operations. Therefore, the answer is 0.\u000aExample case 2.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 7} max = 7 R[j] = 7 for j = 1, 2, 3 causes the arrest\u000ai=2 {7, 7, 7} max = 7 R[j] = 7 for j = 2, 3, 4 causes the arrest\u000aSo we see that for initial test results of the elephants each value of i causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[2]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 7, 8, 7, 7}. Let's check that now elephants will be not arrested.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 8} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=1 {7, 8, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=2 {8, 7, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000aSo we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1.\u000aExample case 3.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 8} max = 8 R[j] = 8 for j = 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest\u000aSo we see that for initial test results of the elephants the value of i = 0 causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[1]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 8, 7, 8, 8}. Let's check that now elephants will be not arrested.\u000ai {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 8, 7} max = 8 R[j] = 8 for j = 1 does not cause the arrest\u000ai=1 {8, 7, 8} max = 8 R[j] = 8 for j = 1, 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest\u000aSo we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1. Note that if we increase by 1 the result R[2] instead of R[1] then the value i = 2 will cause the arrest since {R[2], R[3], R[4]} will be {8, 8, 8} after this operation and we will have 3 values of j from 2 to 4, inclusive, for which R[j] = max{R[2], R[3], R[4]}, namely, j = 2, 3, 4.\u000aExample case 4. When M = 1 the Little Elephant can't reach the goal since for each value of i from 0 to N-K we have at least one value of j for which R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.\u000aAuthor: witua\u000aTester: anton_lunyov\u000aEditorial: http://discuss.codechef.com/problems/LEALCO\u000aTags: backtracking bitmasking easy jan13 witua\u000aDate Added: 20-03-2012\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. The Little Elephant and his friends from the Zoo of Lviv were returning from the party. But suddenly they were stopped by the policeman Big Hippo, who wanted to make an alcohol test for elephants. There were N elephants ordered from the left to the right in a row and numbered from 0 to N-1. Let R[i] to be the result of breathalyzer test of i-th elephant. N 0 N-1 R[i] i Considering current laws in the Zoo, elephants would be arrested if there exists K consecutive elephants among them for which at least M of these K elephants have the maximal test result among these K elephants. K M K K Using poor math notations we can alternatively define this as follows. The elephants would be arrested if there exists i from 0 to N-K, inclusive, such that for at least M different values of j from i to i+K-1, inclusive, we have R[j] = max{R[i], R[i+1], ..., R[i+K-1]}. i 0 N-K M j i i+K-1 R[j] = max{R[i], R[i+1], ..., R[i+K-1]} The Big Hippo is very old and the Little Elephant can change some of the results. In a single operation he can add 1 to the result of any elephant. But for each of the elephants he can apply this operation at most once. 1 What is the minimum number of operations that the Little Elephant needs to apply, such that the sequence of results, after all operations will be applied, let elephants to avoid the arrest? If it is impossible to avoid the arrest applying any number of operations, output -1. -1 Input The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, K, M. The second line contains N space-separated integers R[0], R[1], ..., R[N-1] denoting the test results of the elephants. T T N, K, M N R[0], R[1], ..., R[N-1] Output For each test case, output a single line containing the minimum number of operations needed to avoid the arrest. Constraints 1 \u2264 T \u2264 10\u000a1 \u2264 M \u2264 K \u2264 N \u2264 17\u000a1 \u2264 R[i] \u2264 17 1 \u2264 T \u2264 10 1 T 10 1 \u2264 M \u2264 K \u2264 N \u2264 17 1 M K N 17 1 \u2264 R[i] \u2264 17 1 R[i] 17 Example Input:\u000a4\u000a5 3 2\u000a1 3 1 2 1\u000a5 3 3\u000a7 7 7 7 7\u000a5 3 3\u000a7 7 7 8 8\u000a4 3 1\u000a1 3 1 2\u000a\u000aOutput:\u000a0\u000a1\u000a1\u000a-1 Input: Output: Explanation Example case 1. Let's follow the poor math definition of arrest. We will consider all values of i from 0 to N-K = 2, inclusive, and should count the number of values of j described in the definition. If it less than M = 2 then this value of i does not cause the arrest, otherwise causes. Example case 1. i 0 N-K = 2 j M = 2 i i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {1, 3, 1} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=1 {3, 1, 2} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=2 {1, 2, 1} max = 2 R[j] = 2 for j = 3 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {1, 3, 1} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=1 {3, 1, 2} max = 3 R[j] = 3 for j = 1 does not cause the arrest\u000ai=2 {1, 2, 1} max = 2 R[j] = 2 for j = 3 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion i i {R[i],...,R[i+K-1]} {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max j = i, ..., i+K-1  R[j] = max Conclusion i=0 {1, 3, 1} max = 3 R[j] = 3 for j = 1 does not cause the arrest i=0 i=0 {1, 3, 1} {1, 3, 1} max = 3 max = 3 R[j] = 3 for j = 1 R[j] = 3 j = 1 does not cause the arrest i=1 {3, 1, 2} max = 3 R[j] = 3 for j = 1 does not cause the arrest i=1 i=1 {3, 1, 2} {3, 1, 2} max = 3 max = 3 R[j] = 3 for j = 1 R[j] = 3 j = 1 does not cause the arrest i=2 {1, 2, 1} max = 2 R[j] = 2 for j = 3 does not cause the arrest i=2 i=2 {1, 2, 1} {1, 2, 1} max = 2 max = 2 R[j] = 2 for j = 3 R[j] = 2 j = 3 does not cause the arrest So we see that initial test results of the elephants do not cause their arrest. Hence the Little Elephant does not need to apply any operations. Therefore, the answer is 0. Example case 2.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition. Example case 2. N = 5 K = 3 M = 3 i 3 j i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 7} max = 7 R[j] = 7 for j = 1, 2, 3 causes the arrest\u000ai=2 {7, 7, 7} max = 7 R[j] = 7 for j = 2, 3, 4 causes the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 7} max = 7 R[j] = 7 for j = 1, 2, 3 causes the arrest\u000ai=2 {7, 7, 7} max = 7 R[j] = 7 for j = 2, 3, 4 causes the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion i i {R[i],...,R[i+K-1]} {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max j = i, ..., i+K-1  R[j] = max Conclusion i=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest i=0 i=0 {7, 7, 7} {7, 7, 7} max = 7 max = 7 R[j] = 7 for j = 0, 1, 2 R[j] = 7 j = 0, 1, 2 causes the arrest i=1 {7, 7, 7} max = 7 R[j] = 7 for j = 1, 2, 3 causes the arrest i=1 i=1 {7, 7, 7} {7, 7, 7} max = 7 max = 7 R[j] = 7 for j = 1, 2, 3 R[j] = 7 j = 1, 2, 3 causes the arrest i=2 {7, 7, 7} max = 7 R[j] = 7 for j = 2, 3, 4 causes the arrest i=2 i=2 {7, 7, 7} {7, 7, 7} max = 7 max = 7 R[j] = 7 for j = 2, 3, 4 R[j] = 7 j = 2, 3, 4 causes the arrest So we see that for initial test results of the elephants each value of i causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[2]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 7, 8, 7, 7}. Let's check that now elephants will be not arrested. i 1 R[2] {R[0], R[1], R[2], R[3], R[4]} = {7, 7, 8, 7, 7} i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 8} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=1 {7, 8, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=2 {8, 7, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 8} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=1 {7, 8, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest\u000ai=2 {8, 7, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion i i {R[i],...,R[i+K-1]} {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max j = i, ..., i+K-1  R[j] = max Conclusion i=0 {7, 7, 8} max = 8 R[j] = 8 for j = 2 does not cause the arrest i=0 i=0 {7, 7, 8} {7, 7, 8} max = 8 max = 8 R[j] = 8 for j = 2 R[j] = 8 j = 2 does not cause the arrest i=1 {7, 8, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest i=1 i=1 {7, 8, 7} {7, 8, 7} max = 8 max = 8 R[j] = 8 for j = 2 R[j] = 8 j = 2 does not cause the arrest i=2 {8, 7, 7} max = 8 R[j] = 8 for j = 2 does not cause the arrest i=2 i=2 {8, 7, 7} {8, 7, 7} max = 8 max = 8 R[j] = 8 for j = 2 R[j] = 8 j = 2 does not cause the arrest So we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1. Example case 3.We have N = 5, K = 3, M = 3. Let's construct similar table as in example case 1. Here the value of i will cause the arrest if we have at least 3 values of j described in the definition. Example case 3. N = 5 K = 3 M = 3 i 3 j i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 8} max = 8 R[j] = 8 for j = 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest\u000ai=1 {7, 7, 8} max = 8 R[j] = 8 for j = 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion i i {R[i],...,R[i+K-1]} {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max j = i, ..., i+K-1  R[j] = max Conclusion i=0 {7, 7, 7} max = 7 R[j] = 7 for j = 0, 1, 2 causes the arrest i=0 i=0 {7, 7, 7} {7, 7, 7} max = 7 max = 7 R[j] = 7 for j = 0, 1, 2 R[j] = 7 j = 0, 1, 2 causes the arrest i=1 {7, 7, 8} max = 8 R[j] = 8 for j = 3 does not cause the arrest i=1 i=1 {7, 7, 8} {7, 7, 8} max = 8 max = 8 R[j] = 8 for j = 3 R[j] = 8 j = 3 does not cause the arrest i=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest i=2 i=2 {7, 8, 8} {7, 8, 8} max = 8 max = 8 R[j] = 8 for j = 3, 4 R[j] = 8 j = 3, 4 does not cause the arrest So we see that for initial test results of the elephants the value of i = 0 causes their arrest. Hence the Little Elephant needs to apply some operations in order to avoid the arrest. He could achieve his goal by adding 1 to the result R[1]. Then results will be {R[0], R[1], R[2], R[3], R[4]} = {7, 8, 7, 8, 8}. Let's check that now elephants will be not arrested. i = 0 1 R[1] {R[0], R[1], R[2], R[3], R[4]} = {7, 8, 7, 8, 8} i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 8, 7} max = 8 R[j] = 8 for j = 1 does not cause the arrest\u000ai=1 {8, 7, 8} max = 8 R[j] = 8 for j = 1, 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion\u000ai=0 {7, 8, 7} max = 8 R[j] = 8 for j = 1 does not cause the arrest\u000ai=1 {8, 7, 8} max = 8 R[j] = 8 for j = 1, 3 does not cause the arrest\u000ai=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest i {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max Conclusion i i {R[i],...,R[i+K-1]} {R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} max{R[i],...,R[i+K-1]} For which j = i, ..., i+K-1\u000awe have R[j] = max j = i, ..., i+K-1  R[j] = max Conclusion i=0 {7, 8, 7} max = 8 R[j] = 8 for j = 1 does not cause the arrest i=0 i=0 {7, 8, 7} {7, 8, 7} max = 8 max = 8 R[j] = 8 for j = 1 R[j] = 8 j = 1 does not cause the arrest i=1 {8, 7, 8} max = 8 R[j] = 8 for j = 1, 3 does not cause the arrest i=1 i=1 {8, 7, 8} {8, 7, 8} max = 8 max = 8 R[j] = 8 for j = 1, 3 R[j] = 8 j = 1, 3 does not cause the arrest i=2 {7, 8, 8} max = 8 R[j] = 8 for j = 3, 4 does not cause the arrest i=2 i=2 {7, 8, 8} {7, 8, 8} max = 8 max = 8 R[j] = 8 for j = 3, 4 R[j] = 8 j = 3, 4 does not cause the arrest So we see that now test results of the elephants do not cause their arrest. Thus we see that using 0 operations we can't avoid the arrest but using 1 operation can. Hence the answer is 1. Note that if we increase by 1 the result R[2] instead of R[1] then the value i = 2 will cause the arrest since {R[2], R[3], R[4]} will be {8, 8, 8} after this operation and we will have 3 values of j from 2 to 4, inclusive, for which R[j] = max{R[2], R[3], R[4]}, namely, j = 2, 3, 4. R[2] R[1] i = 2 {R[2], R[3], R[4]} {8, 8, 8} j 2 4 R[j] = max{R[2], R[3], R[4]} j = 2, 3, 4 Example case 4. When M = 1 the Little Elephant can't reach the goal since for each value of i from 0 to N-K we have at least one value of j for which R[j] = max{R[i], R[i+1], ..., R[i+K-1]}. Example case 4. M = 1 i 0 N-K j R[j] = max{R[i], R[i+1], ..., R[i+K-1]}  Author: witua\u000aTester: anton_lunyov\u000aEditorial: http://discuss.codechef.com/problems/LEALCO\u000aTags: backtracking bitmasking easy jan13 witua\u000aDate Added: 20-03-2012\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: witua\u000aTester: anton_lunyov\u000aEditorial: http://discuss.codechef.com/problems/LEALCO\u000aTags: backtracking bitmasking easy jan13 witua\u000aDate Added: 20-03-2012\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: witua Author: witua witua Tester: anton_lunyov Tester: anton_lunyov anton_lunyov Editorial: http://discuss.codechef.com/problems/LEALCO Editorial: http://discuss.codechef.com/problems/LEALCO http://discuss.codechef.com/problems/LEALCO Tags: backtracking bitmasking easy jan13 witua Tags: backtracking bitmasking easy jan13 witua backtracking bitmasking easy jan13 witua Date Added: 20-03-2012 Date Added: 20-03-2012 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V backtracking bitmasking easy jan13 witua
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/LEALCO
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVThe Little Elephant and his friends from the Zoo of Lviv were returning from the party. But suddenly they were stopped by the policeman Big Hippo, who wanted to make an alcohol test for elephants.
p17
aVThere were N elephants ordered from the left to the right in a row and numbered from 0 to N-1. Let R[i] to be the result of breathalyzer test of i-th elephant.
p18
aVConsidering current laws in the Zoo, elephants would be arrested if there exists K consecutive elephants among them for which at least M of these K elephants have the maximal test result among these K elephants.
p19
aVUsing poor math notations we can alternatively define this as follows. The elephants would be arrested if there exists i from 0 to N-K, inclusive, such that for at least M different values of j from i to i+K-1, inclusive, we have R[j] = max{R[i], R[i+1], ..., R[i+K-1]}.
p20
aVThe Big Hippo is very old and the Little Elephant can change some of the results. In a single operation he can add 1 to the result of any elephant. But for each of the elephants he can apply this operation at most once.
p21
aVWhat is the minimum number of operations that the Little Elephant needs to apply, such that the sequence of results, after all operations will be applied, let elephants to avoid the arrest? If it is impossible to avoid the arrest applying any number of operations, output -1.
p22
asS'input'
p23
(lp24
VInput
p25
aVThe first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains three space-separated integers N, K, M. The second line contains N space-separated integers R[0], R[1], ..., R[N-1] denoting the test results of the elephants.
p26
aVOutput
p27
aVFor each test case, output a single line containing the minimum number of operations needed to avoid the arrest.
p28
asS'constraints'
p29
(lp30
VConstraints
p31
aV1 \u2264 T \u2264 10
p32
aV1 \u2264 M \u2264 K \u2264 N \u2264 17
p33
aV1 \u2264 R[i] \u2264 17
p34
asS'id'
p35
c__builtin__
id
p36
sS'name'
p37
VLEALCO
p38
sb.