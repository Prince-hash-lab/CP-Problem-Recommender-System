(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 1 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\u000aIn Ancient Berland, there were N towns, along with M bidirectional roads connecting them. With time, some roads became unusable, and nobody repaired them.\u000aAs a person who is fond of Ancient Berland history, you now want to undertake a small research study. For this purpose, you want to write a program capable of processing the following kinds of queries:\u000aD K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed.\u000aP A x : meaning that the population of the Ath town became x.\u000aLet's call a subset of towns a region if it is possible to get from each town in the subset to every other town in the subset by the usable (those, which haven't already been destroyed) roads, possibly, via some intermediary cities of this subset. The population of the region is, then, the sum of populations of all the towns in the region.\u000aYou are given the initial road system, the initial population in each town and Q queries, each being one of two types above. Your task is to maintain the size of the most populated region after each query.\u000aInput\u000aThe first line of each test case contains three space-separated integers \u2014 N, M, and Q \u2014 denoting the number of cities, the number of roads, and the number of queries, respectively.\u000aThe following line contains N space-separated integers, the ith of which denotes the initial population of the ith city.\u000aThe jth of the following M lines contains a pair of space-separated integers \u2014 Xj, Yj \u2014 denoting that there is a bidirectional road connecting the cities numbered Xj and Yj.\u000aEach of the following Q lines describes a query in one of the forms described earlier.\u000aOutput\u000aOutput Q lines. On the ith line, output the size of the most populated region after performing i queries.\u000aConstraints\u000a1 \u2264 Xj, Yj \u2264 N\u000aRoads' numbers are 1-indexed.\u000aThere is no road that gets removed twice or more.\u000a1 \u2264 Pi \u2264 105\u000aSubtask 1 (30 points) : 1 \u2264 N, M, Q \u2264 103\u000aSubtask 2 (70 points) : 1 \u2264 N, M, Q \u2264 5 × 105\u000aExample\u000aInput:\u000a3 3 6\u000a1 2 3\u000a1 2\u000a2 3\u000a3 1\u000aP 1 3\u000aD 1\u000aP 2 3\u000aD 2\u000aP 3 10\u000aD 3\u000a\u000aOutput:\u000a8\u000a8\u000a9\u000a6\u000a13\u000a10\u000aExplanation\u000aAfter the first query, the populations are (3, 2, 3) and the most populated region is {1, 2, 3}.\u000aAfter the second query the populations and the regions remain the same.\u000aAfter the third query the populations are (3, 3, 3) and the most populated region is again {1, 2, 3}.\u000aAfter the fourth query the populations remain the same, but we have two regions: {1, 3} and {2}. The most populated region is {1, 3}.\u000aAfter the fifth query the populations become equal to (3, 3, 10) respectively, and the most populated region is again {1, 3}.\u000aAfter the last query we have populations the same, but now every city forms it own separate region, and the most populated region is region {3}.\u000aAuthor: xcwgf666\u000aTester: pavel1996\u000aEditorial: http://discuss.codechef.com/problems/ABROADS\u000aTags: bfs dsu ltime31 medium set xcwgf666\u000aDate Added: 29-10-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.\u000aIn Ancient Berland, there were N towns, along with M bidirectional roads connecting them. With time, some roads became unusable, and nobody repaired them.\u000aAs a person who is fond of Ancient Berland history, you now want to undertake a small research study. For this purpose, you want to write a program capable of processing the following kinds of queries:\u000aD K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed.\u000aP A x : meaning that the population of the Ath town became x.\u000aLet's call a subset of towns a region if it is possible to get from each town in the subset to every other town in the subset by the usable (those, which haven't already been destroyed) roads, possibly, via some intermediary cities of this subset. The population of the region is, then, the sum of populations of all the towns in the region.\u000aYou are given the initial road system, the initial population in each town and Q queries, each being one of two types above. Your task is to maintain the size of the most populated region after each query.\u000aInput\u000aThe first line of each test case contains three space-separated integers \u2014 N, M, and Q \u2014 denoting the number of cities, the number of roads, and the number of queries, respectively.\u000aThe following line contains N space-separated integers, the ith of which denotes the initial population of the ith city.\u000aThe jth of the following M lines contains a pair of space-separated integers \u2014 Xj, Yj \u2014 denoting that there is a bidirectional road connecting the cities numbered Xj and Yj.\u000aEach of the following Q lines describes a query in one of the forms described earlier.\u000aOutput\u000aOutput Q lines. On the ith line, output the size of the most populated region after performing i queries.\u000aConstraints\u000a1 \u2264 Xj, Yj \u2264 N\u000aRoads' numbers are 1-indexed.\u000aThere is no road that gets removed twice or more.\u000a1 \u2264 Pi \u2264 105\u000aSubtask 1 (30 points) : 1 \u2264 N, M, Q \u2264 103\u000aSubtask 2 (70 points) : 1 \u2264 N, M, Q \u2264 5 × 105\u000aExample\u000aInput:\u000a3 3 6\u000a1 2 3\u000a1 2\u000a2 3\u000a3 1\u000aP 1 3\u000aD 1\u000aP 2 3\u000aD 2\u000aP 3 10\u000aD 3\u000a\u000aOutput:\u000a8\u000a8\u000a9\u000a6\u000a13\u000a10\u000aExplanation\u000aAfter the first query, the populations are (3, 2, 3) and the most populated region is {1, 2, 3}.\u000aAfter the second query the populations and the regions remain the same.\u000aAfter the third query the populations are (3, 3, 3) and the most populated region is again {1, 2, 3}.\u000aAfter the fourth query the populations remain the same, but we have two regions: {1, 3} and {2}. The most populated region is {1, 3}.\u000aAfter the fifth query the populations become equal to (3, 3, 10) respectively, and the most populated region is again {1, 3}.\u000aAfter the last query we have populations the same, but now every city forms it own separate region, and the most populated region is region {3}.\u000aAuthor: xcwgf666\u000aTester: pavel1996\u000aEditorial: http://discuss.codechef.com/problems/ABROADS\u000aTags: bfs dsu ltime31 medium set xcwgf666\u000aDate Added: 29-10-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. Read problems statements in Mandarin Chinese , Russian and Vietnamese as well. Mandarin Chinese Russian Vietnamese In Ancient Berland, there were N towns, along with M bidirectional roads connecting them. With time, some roads became unusable, and nobody repaired them. N M As a person who is fond of Ancient Berland history, you now want to undertake a small research study. For this purpose, you want to write a program capable of processing the following kinds of queries:  D K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed.\u000aP A x : meaning that the population of the Ath town became x. D K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed. D K K P A x : meaning that the population of the Ath town became x. P A x A th x  Let's call a subset of towns a region if it is possible to get from each town in the subset to every other town in the subset by the usable (those, which haven't already been destroyed) roads, possibly, via some intermediary cities of this subset. The population of the region is, then, the sum of populations of all the towns in the region. region population You are given the initial road system, the initial population in each town and Q queries, each being one of two types above. Your task is to maintain the size of the most populated region after each query. Q Input The first line of each test case contains three space-separated integers \u2014 N, M, and Q \u2014 denoting the number of cities, the number of roads, and the number of queries, respectively. N M Q The following line contains N space-separated integers, the ith of which denotes the initial population of the ith city. N i th i th The jth of the following M lines contains a pair of space-separated integers \u2014 Xj, Yj \u2014 denoting that there is a bidirectional road connecting the cities numbered Xj and Yj. j th M Xj, Yj j j Xj j Yj j Each of the following Q lines describes a query in one of the forms described earlier. Q Output Output Q lines. On the ith line, output the size of the most populated region after performing i queries. Q i th i Constraints  1 \u2264 Xj, Yj \u2264 N\u000aRoads' numbers are 1-indexed.\u000aThere is no road that gets removed twice or more.\u000a1 \u2264 Pi \u2264 105\u000aSubtask 1 (30 points) : 1 \u2264 N, M, Q \u2264 103\u000aSubtask 2 (70 points) : 1 \u2264 N, M, Q \u2264 5 × 105 1 \u2264 Xj, Yj \u2264 N 1 Xj j Yj j N Roads' numbers are 1-indexed. There is no road that gets removed twice or more. 1 \u2264 Pi \u2264 105 1 Pi i 105 5 Subtask 1 (30 points) : 1 \u2264 N, M, Q \u2264 103 1 N M Q 103 3 Subtask 2 (70 points) : 1 \u2264 N, M, Q \u2264 5 × 105 1 N M Q 5 × 105 5  Example Input:\u000a3 3 6\u000a1 2 3\u000a1 2\u000a2 3\u000a3 1\u000aP 1 3\u000aD 1\u000aP 2 3\u000aD 2\u000aP 3 10\u000aD 3\u000a\u000aOutput:\u000a8\u000a8\u000a9\u000a6\u000a13\u000a10 Input: 3 3 6\u000a1 2 3\u000a1 2\u000a2 3\u000a3 1\u000aP 1 3\u000aD 1\u000aP 2 3\u000aD 2\u000aP 3 10\u000aD 3 Output: 8\u000a8\u000a9\u000a6\u000a13\u000a10  Explanation  After the first query, the populations are (3, 2, 3) and the most populated region is {1, 2, 3}.\u000aAfter the second query the populations and the regions remain the same.\u000aAfter the third query the populations are (3, 3, 3) and the most populated region is again {1, 2, 3}.\u000aAfter the fourth query the populations remain the same, but we have two regions: {1, 3} and {2}. The most populated region is {1, 3}.\u000aAfter the fifth query the populations become equal to (3, 3, 10) respectively, and the most populated region is again {1, 3}.\u000aAfter the last query we have populations the same, but now every city forms it own separate region, and the most populated region is region {3}. After the first query, the populations are (3, 2, 3) and the most populated region is {1, 2, 3}. (3, 2, 3) {1, 2, 3} After the second query the populations and the regions remain the same. After the third query the populations are (3, 3, 3) and the most populated region is again {1, 2, 3}. (3, 3, 3) {1, 2, 3} After the fourth query the populations remain the same, but we have two regions: {1, 3} and {2}. The most populated region is {1, 3}. {1, 3} {2} {1, 3} After the fifth query the populations become equal to (3, 3, 10) respectively, and the most populated region is again {1, 3}. (3, 3, 10) {1, 3} After the last query we have populations the same, but now every city forms it own separate region, and the most populated region is region {3}. {3}   Author: xcwgf666\u000aTester: pavel1996\u000aEditorial: http://discuss.codechef.com/problems/ABROADS\u000aTags: bfs dsu ltime31 medium set xcwgf666\u000aDate Added: 29-10-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: xcwgf666\u000aTester: pavel1996\u000aEditorial: http://discuss.codechef.com/problems/ABROADS\u000aTags: bfs dsu ltime31 medium set xcwgf666\u000aDate Added: 29-10-2015\u000aTime Limit: 1 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: xcwgf666 Author: xcwgf666 xcwgf666 Tester: pavel1996 Tester: pavel1996 pavel1996 Editorial: http://discuss.codechef.com/problems/ABROADS Editorial: http://discuss.codechef.com/problems/ABROADS http://discuss.codechef.com/problems/ABROADS Tags: bfs dsu ltime31 medium set xcwgf666 Tags: bfs dsu ltime31 medium set xcwgf666 bfs dsu ltime31 medium set xcwgf666 Date Added: 29-10-2015 Date Added: 29-10-2015 Time Limit: 1 sec Time Limit: 1 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYPY, PYTH, PYTH 3.4, RUBY, SCALA, SCM chicken, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V bfs dsu ltime31 medium set xcwgf666
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/ABROADS
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVRead problems statements in Mandarin Chinese , Russian and Vietnamese as well.
p17
aVIn Ancient Berland, there were N towns, along with M bidirectional roads connecting them. With time, some roads became unusable, and nobody repaired them.
p18
aVAs a person who is fond of Ancient Berland history, you now want to undertake a small research study. For this purpose, you want to write a program capable of processing the following kinds of queries:
p19
aVD K : meaning that the road numbered K in the input became unusable. The road numbers are 1-indexed.
p20
aVP A x : meaning that the population of the Ath town became x.
p21
aVLet's call a subset of towns a region if it is possible to get from each town in the subset to every other town in the subset by the usable (those, which haven't already been destroyed) roads, possibly, via some intermediary cities of this subset. The population of the region is, then, the sum of populations of all the towns in the region.
p22
aVYou are given the initial road system, the initial population in each town and Q queries, each being one of two types above. Your task is to maintain the size of the most populated region after each query.
p23
asS'input'
p24
(lp25
VInput
p26
aVThe first line of each test case contains three space-separated integers \u2014 N, M, and Q \u2014 denoting the number of cities, the number of roads, and the number of queries, respectively.
p27
aVThe following line contains N space-separated integers, the ith of which denotes the initial population of the ith city.
p28
aVThe jth of the following M lines contains a pair of space-separated integers \u2014 Xj, Yj \u2014 denoting that there is a bidirectional road connecting the cities numbered Xj and Yj.
p29
aVEach of the following Q lines describes a query in one of the forms described earlier.
p30
aVOutput
p31
aVOutput Q lines. On the ith line, output the size of the most populated region after performing i queries.
p32
asS'constraints'
p33
(lp34
VConstraints
p35
aV1 \u2264 Xj, Yj \u2264 N
p36
aVRoads' numbers are 1-indexed.
p37
aVThere is no road that gets removed twice or more.
p38
aV1 \u2264 Pi \u2264 105
p39
aVSubtask 1 (30 points) : 1 \u2264 N, M, Q \u2264 103
p40
aVSubtask 2 (70 points) : 1 \u2264 N, M, Q \u2264 5 × 105
p41
asS'id'
p42
c__builtin__
id
p43
sS'name'
p44
VABROADS
p45
sb.