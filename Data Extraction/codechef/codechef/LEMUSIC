(iproblems
Problem
p0
(dp1
S'time_limit'
p2
(lp3
VTime Limit: 2 sec
p4
asS'source_limit'
p5
(lp6
VSource Limit: 50000 Bytes
p7
asS'description'
p8
V All submissions for this problem are available.\u000aThe Little Elephant from the Zoo of Lviv likes listening to music.\u000aThere are N songs, numbered from 1 to N, in his MP3-player. The song i is described by a pair of integers Bi and Li - the band (represented as integer) that performed that song and the length of that song in seconds. The Little Elephant is going to listen all the songs exactly once in some order.\u000aThe sweetness of the song is equal to the product of the length of that song and the number of different bands listened before (including the current playing song).\u000aHelp the Little Elephant to find the order that maximizes the total sweetness of all N songs. Print that sweetness.\u000aInput\u000aThe first line of the input contains single integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains single integer N, denoting the number of the songs. The next N lines describe the songs in the MP3-player. The i-th line contains two space-sparated integers Bi and Li.\u000aOutput\u000aFor each test, output the maximum total sweetness.\u000aConstraints\u000a1 \u2264 T \u2264 5\u000a1 \u2264 N \u2264 100000 (105)\u000a1 \u2264 Bi, Li \u2264 1000000000 (109)\u000aExample\u000aInput:\u000a2\u000a3\u000a1 2\u000a2 2\u000a3 2\u000a3\u000a2 3\u000a1 2\u000a2 4\u000a\u000aOutput:\u000a12\u000a16\u000aExplanation\u000aIn the first sample: if he listens the songs in given order, then\u000aB1=1, L1=2: the sweetness = 2 * 1 = 2\u000aB2=2, L2=2: the sweetness = 2 * 2 = 4\u000aB3=3, L3=2: the sweetness = 2 * 3 = 6\u000aSo the total sweetness is 12. In this case, you can check the total sweetness does not depend on the order of the songs.\u000aIn the second sample: if he listens the songs in given order, then\u000aB1=2, L1=3: the sweetness = 3 * 1 = 3\u000aB2=1, L2=2: the sweetness = 2 * 2 = 4\u000aB3=2, L3=4: the sweetness = 4 * 2 = 8\u000aSo the total sweetness is 15. However, he listens the song 2 firstly, then\u000aB2=1, L2=2: the sweetness = 2 * 1 = 2\u000aB1=2, L1=3: the sweetness = 3 * 2 = 6\u000aB3=2, L3=4: the sweetness = 4 * 2 = 8\u000aSo the total sweetness is 16, and it is the maximum total sweetness.\u000aAuthor: witua\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/LEMUSIC\u000aTags: april13 easy greedy sorting witua\u000aDate Added: 15-04-2012\u000aTime Limit: 2 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC\u000aSUBMIT All submissions for this problem are available.\u000aThe Little Elephant from the Zoo of Lviv likes listening to music.\u000aThere are N songs, numbered from 1 to N, in his MP3-player. The song i is described by a pair of integers Bi and Li - the band (represented as integer) that performed that song and the length of that song in seconds. The Little Elephant is going to listen all the songs exactly once in some order.\u000aThe sweetness of the song is equal to the product of the length of that song and the number of different bands listened before (including the current playing song).\u000aHelp the Little Elephant to find the order that maximizes the total sweetness of all N songs. Print that sweetness.\u000aInput\u000aThe first line of the input contains single integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains single integer N, denoting the number of the songs. The next N lines describe the songs in the MP3-player. The i-th line contains two space-sparated integers Bi and Li.\u000aOutput\u000aFor each test, output the maximum total sweetness.\u000aConstraints\u000a1 \u2264 T \u2264 5\u000a1 \u2264 N \u2264 100000 (105)\u000a1 \u2264 Bi, Li \u2264 1000000000 (109)\u000aExample\u000aInput:\u000a2\u000a3\u000a1 2\u000a2 2\u000a3 2\u000a3\u000a2 3\u000a1 2\u000a2 4\u000a\u000aOutput:\u000a12\u000a16\u000aExplanation\u000aIn the first sample: if he listens the songs in given order, then\u000aB1=1, L1=2: the sweetness = 2 * 1 = 2\u000aB2=2, L2=2: the sweetness = 2 * 2 = 4\u000aB3=3, L3=2: the sweetness = 2 * 3 = 6\u000aSo the total sweetness is 12. In this case, you can check the total sweetness does not depend on the order of the songs.\u000aIn the second sample: if he listens the songs in given order, then\u000aB1=2, L1=3: the sweetness = 3 * 1 = 3\u000aB2=1, L2=2: the sweetness = 2 * 2 = 4\u000aB3=2, L3=4: the sweetness = 4 * 2 = 8\u000aSo the total sweetness is 15. However, he listens the song 2 firstly, then\u000aB2=1, L2=2: the sweetness = 2 * 1 = 2\u000aB1=2, L1=3: the sweetness = 3 * 2 = 6\u000aB3=2, L3=4: the sweetness = 4 * 2 = 8\u000aSo the total sweetness is 16, and it is the maximum total sweetness.\u000aAuthor: witua\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/LEMUSIC\u000aTags: april13 easy greedy sorting witua\u000aDate Added: 15-04-2012\u000aTime Limit: 2 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC All submissions for this problem are available. The Little Elephant from the Zoo of Lviv likes listening to music. There are N songs, numbered from 1 to N, in his MP3-player. The song i is described by a pair of integers Bi and Li - the band (represented as integer) that performed that song and the length of that song in seconds. The Little Elephant is going to listen all the songs exactly once in some order. N 1 N i Bi i Li i The sweetness of the song is equal to the product of the length of that song and the number of different bands listened before (including the current playing song). Help the Little Elephant to find the order that maximizes the total sweetness of all N songs. Print that sweetness. N Input  The first line of the input contains single integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains single integer N, denoting the number of the songs. The next N lines describe the songs in the MP3-player. The i-th line contains two space-sparated integers Bi and Li. T T N N i Bi i Li i Output  For each test, output the maximum total sweetness. Constraints 1 \u2264 T \u2264 5\u000a1 \u2264 N \u2264 100000 (105)\u000a1 \u2264 Bi, Li \u2264 1000000000 (109) 1 \u2264 T \u2264 5 1 \u2264 T \u2264 5 1 \u2264 N \u2264 100000 (105) 1 \u2264 N \u2264 100000 (105) 5 1 \u2264 Bi, Li \u2264 1000000000 (109) 1 \u2264 Bi, Li \u2264 1000000000 (109) i i 9 Example Input:\u000a2\u000a3\u000a1 2\u000a2 2\u000a3 2\u000a3\u000a2 3\u000a1 2\u000a2 4\u000a\u000aOutput:\u000a12\u000a16 Input: Output: Explanation  In the first sample: if he listens the songs in given order, then\u000aB1=1, L1=2: the sweetness = 2 * 1 = 2\u000aB2=2, L2=2: the sweetness = 2 * 2 = 4\u000aB3=3, L3=2: the sweetness = 2 * 3 = 6\u000aSo the total sweetness is 12. In this case, you can check the total sweetness does not depend on the order of the songs.  B1=1, L1=2 1 1 2 1 2  B2=2, L2=2 2 2 2 2 4  B3=3, L3=2 3 3 2 3 6  12 In the second sample: if he listens the songs in given order, then\u000aB1=2, L1=3: the sweetness = 3 * 1 = 3\u000aB2=1, L2=2: the sweetness = 2 * 2 = 4\u000aB3=2, L3=4: the sweetness = 4 * 2 = 8\u000aSo the total sweetness is 15. However, he listens the song 2 firstly, then\u000aB2=1, L2=2: the sweetness = 2 * 1 = 2\u000aB1=2, L1=3: the sweetness = 3 * 2 = 6\u000aB3=2, L3=4: the sweetness = 4 * 2 = 8\u000aSo the total sweetness is 16, and it is the maximum total sweetness.  B1=2, L1=3 1 1 3 1 3  B2=1, L2=2 2 2 2 2 4  B3=2, L3=4 3 3 4 2 8  15 2  B2=1, L2=2 2 2 2 1 2  B1=2, L1=3 1 1 3 2 6  B3=2, L3=4 3 3 4 2 8  16  Author: witua\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/LEMUSIC\u000aTags: april13 easy greedy sorting witua\u000aDate Added: 15-04-2012\u000aTime Limit: 2 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: witua\u000aTester: laycurse\u000aEditorial: http://discuss.codechef.com/problems/LEMUSIC\u000aTags: april13 easy greedy sorting witua\u000aDate Added: 15-04-2012\u000aTime Limit: 2 sec\u000aSource Limit: 50000 Bytes\u000aLanguages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Author: witua Author: witua witua Tester: laycurse Tester: laycurse laycurse Editorial: http://discuss.codechef.com/problems/LEMUSIC Editorial: http://discuss.codechef.com/problems/LEMUSIC http://discuss.codechef.com/problems/LEMUSIC Tags: april13 easy greedy sorting witua Tags: april13 easy greedy sorting witua april13 easy greedy sorting witua Date Added: 15-04-2012 Date Added: 15-04-2012 Time Limit: 2 sec Time Limit: 2 sec Source Limit: 50000 Bytes Source Limit: 50000 Bytes Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC Languages: ADA, ASM, BASH, BF, C, C99 strict, CAML, CLOJ, CLPS, CPP 4.3.2, CPP 4.9.2, CPP14, CS2, D, ERL, FORT, FS, GO, HASK, ICK, ICON, JAVA, JS, LISP clisp, LISP sbcl, LUA, NEM, NICE, NODEJS, PAS fpc, PAS gpc, PERL, PERL6, PHP, PIKE, PRLG, PYTH, PYTH 3.4, RUBY, SCALA, SCM guile, SCM qobi, ST, TCL, TEXT, WSPC SUBMIT  SUBMIT SUBMIT SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS SUCCESSFUL SUBMISSIONS  
p9
sS'tags'
p10
V april13 easy greedy sorting witua
p11
sS'url'
p12
Vhttps://www.codechef.com/problems/LEMUSIC
p13
sS'statement'
p14
(lp15
VAll submissions for this problem are available.
p16
aVThe Little Elephant from the Zoo of Lviv likes listening to music.
p17
aVThere are N songs, numbered from 1 to N, in his MP3-player. The song i is described by a pair of integers Bi and Li - the band (represented as integer) that performed that song and the length of that song in seconds. The Little Elephant is going to listen all the songs exactly once in some order.
p18
aVThe sweetness of the song is equal to the product of the length of that song and the number of different bands listened before (including the current playing song).
p19
aVHelp the Little Elephant to find the order that maximizes the total sweetness of all N songs. Print that sweetness.
p20
asS'input'
p21
(lp22
VInput
p23
aVThe first line of the input contains single integer T, denoting the number of test cases. Then T test cases follow. The first line of each test case contains single integer N, denoting the number of the songs. The next N lines describe the songs in the MP3-player. The i-th line contains two space-sparated integers Bi and Li.
p24
aVOutput
p25
aVFor each test, output the maximum total sweetness.
p26
asS'constraints'
p27
(lp28
VConstraints
p29
aV1 \u2264 T \u2264 5
p30
aV1 \u2264 N \u2264 100000 (105)
p31
aV1 \u2264 Bi, Li \u2264 1000000000 (109)
p32
asS'id'
p33
c__builtin__
id
p34
sS'name'
p35
VLEMUSIC
p36
sb.