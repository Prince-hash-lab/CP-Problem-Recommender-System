(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VC. Epidemic in Monstropolis\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aThere was an epidemic in Monstropolis and all monsters became sick. To recover, all monsters lined up in queue for an appointment to the only doctor in the city.\u000aSoon, monsters became hungry and began to eat each other.\u000aOne monster can eat other monster if its weight is strictly greater than the weight of the monster being eaten, and they stand in the queue next to each other. Monsters eat each other instantly. There are no monsters which are being eaten at the same moment. After the monster A eats the monster B, the weight of the monster A increases by the weight of the eaten monster B. In result of such eating the length of the queue decreases by one, all monsters after the eaten one step forward so that there is no empty places in the queue again. A monster can eat several monsters one after another. Initially there were n monsters in the queue, the i-th of which had weight ai.\u000aFor example, if weights are [1,\u20092,\u20092,\u20092,\u20091,\u20092] (in order of queue, monsters are numbered from 1 to 6 from left to right) then some of the options are:\u000athe first monster can't eat the second monster because a1\u2009=\u20091 is not greater than a2\u2009=\u20092;\u000athe second monster can't eat the third monster because a2\u2009=\u20092 is not greater than a3\u2009=\u20092;\u000athe second monster can't eat the fifth monster because they are not neighbors;\u000athe second monster can eat the first monster, the queue will be transformed to [3,\u20092,\u20092,\u20091,\u20092].\u000aAfter some time, someone said a good joke and all monsters recovered. At that moment there were k (k\u2009\u2264\u2009n) monsters in the queue, the j-th of which had weight bj. Both sequences (a and b) contain the weights of the monsters in the order from the first to the last.\u000aYou are required to provide one of the possible orders of eating monsters which led to the current queue, or to determine that this could not happen. Assume that the doctor didn't make any appointments while monsters were eating each other.\u000aInput\u000aThe first line contains single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009500) \u2014 the number of monsters in the initial queue.\u000aThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009106) \u2014 the initial weights of the monsters.\u000aThe third line contains single integer k (1\u2009\u2264\u2009k\u2009\u2264\u2009n) \u2014 the number of monsters in the queue after the joke.\u000aThe fourth line contains k integers b1,\u2009b2,\u2009...,\u2009bk (1\u2009\u2264\u2009bj\u2009\u2264\u20095·108) \u2014 the weights of the monsters after the joke.\u000aMonsters are listed in the order from the beginning of the queue to the end.\u000aOutput\u000aIn case if no actions could lead to the final queue, print "NO" (without quotes) in the only line.\u000aOtherwise print "YES" (without quotes) in the first line. In the next n\u2009-\u2009k lines print actions in the chronological order. In each line print x \u2014 the index number of the monster in the current queue which eats and, separated by space, the symbol 'L' if the monster which stays the x-th in the queue eats the monster in front of him, or 'R' if the monster which stays the x-th in the queue eats the monster behind him. After each eating the queue is enumerated again.\u000aWhen one monster eats another the queue decreases. If there are several answers, print any of them.\u000aExamples\u000ainput\u000a6\u000a1 2 2 2 1 2\u000a2\u000a5 5\u000aoutput\u000aYES\u000a2 L\u000a1 R\u000a4 L\u000a3 L\u000ainput\u000a5\u000a1 2 3 4 5\u000a1\u000a15\u000aoutput\u000aYES\u000a5 L\u000a4 L\u000a3 L\u000a2 L\u000ainput\u000a5\u000a1 1 1 3 3\u000a3\u000a2 1 6\u000aoutput\u000aNO\u000aNote\u000aIn the first example, initially there were n\u2009=\u20096 monsters, their weights are [1,\u20092,\u20092,\u20092,\u20091,\u20092] (in order of queue from the first monster to the last monster). The final queue should be [5,\u20095]. The following sequence of eatings leads to the final queue:\u000athe second monster eats the monster to the left (i.e. the first monster), queue becomes [3,\u20092,\u20092,\u20091,\u20092];\u000athe first monster (note, it was the second on the previous step) eats the monster to the right (i.e. the second monster), queue becomes [5,\u20092,\u20091,\u20092];\u000athe fourth monster eats the mosnter to the left (i.e. the third monster), queue becomes [5,\u20092,\u20093];\u000athe finally, the third monster eats the monster to the left (i.e. the second monster), queue becomes [5,\u20095].\u000aNote that for each step the output contains numbers of the monsters in their current order in the queue.
p3
sS'problemStatement'
p4
VC. Epidemic in Monstropolis\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aThere was an epidemic in Monstropolis and all monsters became sick. To recover, all monsters lined up in queue for an appointment to the only doctor in the city.\u000aSoon, monsters became hungry and began to eat each other.\u000aOne monster can eat other monster if its weight is strictly greater than the weight of the monster being eaten, and they stand in the queue next to each other. Monsters eat each other instantly. There are no monsters which are being eaten at the same moment. After the monster A eats the monster B, the weight of the monster A increases by the weight of the eaten monster B. In result of such eating the length of the queue decreases by one, all monsters after the eaten one step forward so that there is no empty places in the queue again. A monster can eat several monsters one after another. Initially there were n monsters in the queue, the i-th of which had weight ai.\u000aFor example, if weights are [1,\u20092,\u20092,\u20092,\u20091,\u20092] (in order of queue, monsters are numbered from 1 to 6 from left to right) then some of the options are:\u000athe first monster can't eat the second monster because a1\u2009=\u20091 is not greater than a2\u2009=\u20092;\u000athe second monster can't eat the third monster because a2\u2009=\u20092 is not greater than a3\u2009=\u20092;\u000athe second monster can't eat the fifth monster because they are not neighbors;\u000athe second monster can eat the first monster, the queue will be transformed to [3,\u20092,\u20092,\u20091,\u20092].\u000aAfter some time, someone said a good joke and all monsters recovered. At that moment there were k (k\u2009\u2264\u2009n) monsters in the queue, the j-th of which had weight bj. Both sequences (a and b) contain the weights of the monsters in the order from the first to the last.\u000aYou are required to provide one of the possible orders of eating monsters which led to the current queue, or to determine that this could not happen. Assume that the doctor didn't make any appointments while monsters were eating each other.\u000aInput\u000aThe first line contains single integer n (1\u2009\u2264\u2009n\u2009\u2264\u2009500) \u2014 the number of monsters in the initial queue.\u000aThe second line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009106) \u2014 the initial weights of the monsters.\u000aThe third line contains single integer k (1\u2009\u2264\u2009k\u2009\u2264\u2009n) \u2014 the number of monsters in the queue after the joke.\u000aThe fourth line contains k integers b1,\u2009b2,\u2009...,\u2009bk (1\u2009\u2264\u2009bj\u2009\u2264\u20095·108) \u2014 the weights of the monsters after the joke.\u000aMonsters are listed in the order from the beginning of the queue to the end.\u000aOutput\u000aIn case if no actions could lead to the final queue, print "NO" (without quotes) in the only line.\u000aOtherwise print "YES" (without quotes) in the first line. In the next n\u2009-\u2009k lines print actions in the chronological order. In each line print x \u2014 the index number of the monster in the current queue which eats and, separated by space, the symbol 'L' if the monster which stays the x-th in the queue eats the monster in front of him, or 'R' if the monster which stays the x-th in the queue eats the monster behind him. After each eating the queue is enumerated again.\u000aWhen one monster eats another the queue decreases. If there are several answers, print any of them.\u000aExamples\u000ainput\u000a6\u000a1 2 2 2 1 2\u000a2\u000a5 5\u000aoutput\u000aYES\u000a2 L\u000a1 R\u000a4 L\u000a3 L\u000ainput\u000a5\u000a1 2 3 4 5\u000a1\u000a15\u000aoutput\u000aYES\u000a5 L\u000a4 L\u000a3 L\u000a2 L\u000ainput\u000a5\u000a1 1 1 3 3\u000a3\u000a2 1 6\u000aoutput\u000aNO\u000aNote\u000aIn the first example, initially there were n\u2009=\u20096 monsters, their weights are [1,\u20092,\u20092,\u20092,\u20091,\u20092] (in order of queue from the first monster to the last monster). The final queue should be [5,\u20095]. The following sequence of eatings leads to the final queue:\u000athe second monster eats the monster to the left (i.e. the first monster), queue becomes [3,\u20092,\u20092,\u20091,\u20092];\u000athe first monster (note, it was the second on the previous step) eats the monster to the right (i.e. the second monster), queue becomes [5,\u20092,\u20091,\u20092];\u000athe fourth monster eats the mosnter to the left (i.e. the third monster), queue becomes [5,\u20092,\u20093];\u000athe finally, the third monster eats the monster to the left (i.e. the second monster), queue becomes [5,\u20095].\u000aNote that for each step the output contains numbers of the monsters in their current order in the queue.
p5
sS'name'
p6
VC. Epidemic in Monstropolis
p7
sS'tags'
p8
Vconstructive algorithms dp greedy two pointers 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/733/C
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V1 second
p15
sS'problemId'
p16
V733/C
p17
sS'id'
p18
c__builtin__
id
p19
sb.