(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VB. Arpa\u2019s obvious problem and Mehrdad\u2019s terrible solution\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aThere are some beautiful girls in Arpa\u2019s land as mentioned before.\u000aOnce Arpa came up with an obvious problem:\u000aGiven an array and a number x, count the number of pairs of indices i,\u2009j (1\u2009\u2264\u2009i\u2009<\u2009j\u2009\u2264\u2009n) such that , where is bitwise xor operation (see notes for explanation).\u000aImmediately, Mehrdad discovered a terrible solution that nobody trusted. Now Arpa needs your help to implement the solution to that problem.\u000aInput\u000aFirst line contains two integers n and x (1\u2009\u2264\u2009n\u2009\u2264\u2009105,\u20090\u2009\u2264\u2009x\u2009\u2264\u2009105) \u2014 the number of elements in the array and the integer x.\u000aSecond line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009105) \u2014 the elements of the array.\u000aOutput\u000aPrint a single integer: the answer to the problem.\u000aExamples\u000ainput\u000a2 3\u000a1 2\u000aoutput\u000a1\u000ainput\u000a6 1\u000a5 1 2 3 4 1\u000aoutput\u000a2\u000aNote\u000aIn the first sample there is only one pair of i\u2009=\u20091 and j\u2009=\u20092. so the answer is 1.\u000aIn the second sample the only two pairs are i\u2009=\u20093, j\u2009=\u20094 (since ) and i\u2009=\u20091, j\u2009=\u20095 (since ).\u000aA bitwise xor takes two bit integers of equal length and performs the logical xor operation on each pair of corresponding bits. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1. You can read more about bitwise xor operation here: https://en.wikipedia.org/wiki/Bitwise_operation#XOR.
p3
sS'problemStatement'
p4
VB. Arpa\u2019s obvious problem and Mehrdad\u2019s terrible solution\u000atime limit per test1 second\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aThere are some beautiful girls in Arpa\u2019s land as mentioned before.\u000aOnce Arpa came up with an obvious problem:\u000aGiven an array and a number x, count the number of pairs of indices i,\u2009j (1\u2009\u2264\u2009i\u2009<\u2009j\u2009\u2264\u2009n) such that , where is bitwise xor operation (see notes for explanation).\u000aImmediately, Mehrdad discovered a terrible solution that nobody trusted. Now Arpa needs your help to implement the solution to that problem.\u000aInput\u000aFirst line contains two integers n and x (1\u2009\u2264\u2009n\u2009\u2264\u2009105,\u20090\u2009\u2264\u2009x\u2009\u2264\u2009105) \u2014 the number of elements in the array and the integer x.\u000aSecond line contains n integers a1,\u2009a2,\u2009...,\u2009an (1\u2009\u2264\u2009ai\u2009\u2264\u2009105) \u2014 the elements of the array.\u000aOutput\u000aPrint a single integer: the answer to the problem.\u000aExamples\u000ainput\u000a2 3\u000a1 2\u000aoutput\u000a1\u000ainput\u000a6 1\u000a5 1 2 3 4 1\u000aoutput\u000a2\u000aNote\u000aIn the first sample there is only one pair of i\u2009=\u20091 and j\u2009=\u20092. so the answer is 1.\u000aIn the second sample the only two pairs are i\u2009=\u20093, j\u2009=\u20094 (since ) and i\u2009=\u20091, j\u2009=\u20095 (since ).\u000aA bitwise xor takes two bit integers of equal length and performs the logical xor operation on each pair of corresponding bits. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1. You can read more about bitwise xor operation here: https://en.wikipedia.org/wiki/Bitwise_operation#XOR.
p5
sS'name'
p6
VB. Arpa\u2019s obvious problem and Mehrdad\u2019s terrible solution
p7
sS'tags'
p8
Vmath number theory 
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/742/B
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V1 second
p15
sS'problemId'
p16
V742/B
p17
sS'id'
p18
c__builtin__
id
p19
sb.