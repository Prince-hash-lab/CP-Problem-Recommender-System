(iCodeforcesProblem
CodeforcesProblem
p0
(dp1
S'desription'
p2
VG. Messages on a Tree\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aAlice and Bob are well-known for sending messages to each other. This time you have a rooted tree with Bob standing in the root node and copies of Alice standing in each of the other vertices. The root node has number 0, the rest are numbered 1 through n.\u000aAt some moments of time some copies of Alice want to send a message to Bob and receive an answer. We will call this copy the initiator. The process of sending a message contains several steps:\u000aThe initiator sends the message to the person standing in the parent node and begins waiting for the answer.\u000aWhen some copy of Alice receives a message from some of her children nodes, she sends the message to the person standing in the parent node and begins waiting for the answer.\u000aWhen Bob receives a message from some of his child nodes, he immediately sends the answer to the child node where the message came from.\u000aWhen some copy of Alice (except for initiator) receives an answer she is waiting for, she immediately sends it to the child vertex where the message came from.\u000aWhen the initiator receives the answer she is waiting for, she doesn't send it to anybody.\u000aThere is a special case: a copy of Alice can't wait for two answers at the same time, so if some copy of Alice receives a message from her child node while she already waits for some answer, she rejects the message and sends a message saying this back to the child node where the message came from. Then the copy of Alice in the child vertex processes this answer as if it was from Bob.\u000aThe process of sending a message to a parent node or to a child node is instant but a receiver (a parent or a child) gets a message after 1 second.\u000aIf some copy of Alice receives several messages from child nodes at the same moment while she isn't waiting for an answer, she processes the message from the initiator with the smallest number and rejects all the rest. If some copy of Alice receives messages from children nodes and also receives the answer she is waiting for at the same instant, then Alice first processes the answer, then immediately continue as normal with the incoming messages.\u000aYou are given the moments of time when some copy of Alice becomes the initiator and sends a message to Bob. For each message, find the moment of time when the answer (either from Bob or some copy of Alice) will be received by the initiator.\u000aYou can assume that if Alice wants to send a message (i.e. become the initiator) while waiting for some answer, she immediately rejects the message and receives an answer from herself in no time.\u000aInput\u000aThe first line of input contains two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009200\u2009000) \u2014 the number of nodes with Alices and the number of messages.\u000aSecond line contains n integers p1,\u2009p2,\u2009...,\u2009pn (0\u2009\u2264\u2009pi\u2009<\u2009i). The integer pi is the number of the parent node of node i.\u000aThe next m lines describe the messages. The i-th of them contains two integers xi and ti (1\u2009\u2264\u2009xi\u2009\u2264\u2009n, 1\u2009\u2264\u2009ti\u2009\u2264\u2009109) \u2014 the number of the vertex of the initiator of the i-th message and the time of the initiation (in seconds). The messages are given in order of increasing initiation time (i.e. ti\u2009+\u20091\u2009\u2265\u2009ti holds for 1\u2009\u2264\u2009i\u2009<\u2009m). The pairs (xi,\u2009ti) are distinct.\u000aOutput\u000aPrint m integers \u2014 the i-th of them is the moment of time when the answer for the i-th message will be received by the initiator.\u000aExamples\u000ainput\u000a6 3\u000a0 1 2 3 2 5\u000a4 6\u000a6 9\u000a5 11\u000aoutput\u000a14 13 11 \u000ainput\u000a3 2\u000a0 1 1\u000a2 1\u000a3 1\u000aoutput\u000a5 3 \u000ainput\u000a8 3\u000a0 1 1 2 3 3 4 5\u000a6 1\u000a8 2\u000a4 5\u000aoutput\u000a7 6 11 \u000aNote\u000aIn the first example the first message is initiated at the moment 6, reaches Bob at the moment 10, and the answer reaches the initiator at the moment 14. The second message reaches vertex 2 at the moment 11. At this moment the copy of Alice in this vertex is still waiting for the answer for the first message, so she rejects the second message. The answer reaches the initiator at the moment 13. The third message is not sent at all, because at the moment 11 Alice in vertex 5 is waiting for the answer for the second message.\u000aIn the second example the first message reaches Bob, the second is rejected by Alice in vertex 1. This is because the message with smaller initiator number has the priority.\u000aIn the third example the first and the third messages reach Bob, while the second message is rejected by Alice in vertex 3.
p3
sS'problemStatement'
p4
VG. Messages on a Tree\u000atime limit per test2 seconds\u000amemory limit per test256 megabytes\u000ainputstandard input\u000aoutputstandard output\u000aAlice and Bob are well-known for sending messages to each other. This time you have a rooted tree with Bob standing in the root node and copies of Alice standing in each of the other vertices. The root node has number 0, the rest are numbered 1 through n.\u000aAt some moments of time some copies of Alice want to send a message to Bob and receive an answer. We will call this copy the initiator. The process of sending a message contains several steps:\u000aThe initiator sends the message to the person standing in the parent node and begins waiting for the answer.\u000aWhen some copy of Alice receives a message from some of her children nodes, she sends the message to the person standing in the parent node and begins waiting for the answer.\u000aWhen Bob receives a message from some of his child nodes, he immediately sends the answer to the child node where the message came from.\u000aWhen some copy of Alice (except for initiator) receives an answer she is waiting for, she immediately sends it to the child vertex where the message came from.\u000aWhen the initiator receives the answer she is waiting for, she doesn't send it to anybody.\u000aThere is a special case: a copy of Alice can't wait for two answers at the same time, so if some copy of Alice receives a message from her child node while she already waits for some answer, she rejects the message and sends a message saying this back to the child node where the message came from. Then the copy of Alice in the child vertex processes this answer as if it was from Bob.\u000aThe process of sending a message to a parent node or to a child node is instant but a receiver (a parent or a child) gets a message after 1 second.\u000aIf some copy of Alice receives several messages from child nodes at the same moment while she isn't waiting for an answer, she processes the message from the initiator with the smallest number and rejects all the rest. If some copy of Alice receives messages from children nodes and also receives the answer she is waiting for at the same instant, then Alice first processes the answer, then immediately continue as normal with the incoming messages.\u000aYou are given the moments of time when some copy of Alice becomes the initiator and sends a message to Bob. For each message, find the moment of time when the answer (either from Bob or some copy of Alice) will be received by the initiator.\u000aYou can assume that if Alice wants to send a message (i.e. become the initiator) while waiting for some answer, she immediately rejects the message and receives an answer from herself in no time.\u000aInput\u000aThe first line of input contains two integers n and m (1\u2009\u2264\u2009n,\u2009m\u2009\u2264\u2009200\u2009000) \u2014 the number of nodes with Alices and the number of messages.\u000aSecond line contains n integers p1,\u2009p2,\u2009...,\u2009pn (0\u2009\u2264\u2009pi\u2009<\u2009i). The integer pi is the number of the parent node of node i.\u000aThe next m lines describe the messages. The i-th of them contains two integers xi and ti (1\u2009\u2264\u2009xi\u2009\u2264\u2009n, 1\u2009\u2264\u2009ti\u2009\u2264\u2009109) \u2014 the number of the vertex of the initiator of the i-th message and the time of the initiation (in seconds). The messages are given in order of increasing initiation time (i.e. ti\u2009+\u20091\u2009\u2265\u2009ti holds for 1\u2009\u2264\u2009i\u2009<\u2009m). The pairs (xi,\u2009ti) are distinct.\u000aOutput\u000aPrint m integers \u2014 the i-th of them is the moment of time when the answer for the i-th message will be received by the initiator.\u000aExamples\u000ainput\u000a6 3\u000a0 1 2 3 2 5\u000a4 6\u000a6 9\u000a5 11\u000aoutput\u000a14 13 11 \u000ainput\u000a3 2\u000a0 1 1\u000a2 1\u000a3 1\u000aoutput\u000a5 3 \u000ainput\u000a8 3\u000a0 1 1 2 3 3 4 5\u000a6 1\u000a8 2\u000a4 5\u000aoutput\u000a7 6 11 \u000aNote\u000aIn the first example the first message is initiated at the moment 6, reaches Bob at the moment 10, and the answer reaches the initiator at the moment 14. The second message reaches vertex 2 at the moment 11. At this moment the copy of Alice in this vertex is still waiting for the answer for the first message, so she rejects the second message. The answer reaches the initiator at the moment 13. The third message is not sent at all, because at the moment 11 Alice in vertex 5 is waiting for the answer for the second message.\u000aIn the second example the first message reaches Bob, the second is rejected by Alice in vertex 1. This is because the message with smaller initiator number has the priority.\u000aIn the third example the first and the third messages reach Bob, while the second message is rejected by Alice in vertex 3.
p5
sS'name'
p6
VG. Messages on a Tree
p7
sS'tags'
p8
S''
p9
sS'url'
p10
Vhttp://codeforces.com/problemset/problem/725/G
p11
sS'memorylimit'
p12
V256 megabytes
p13
sS'timelimit'
p14
V2 seconds
p15
sS'problemId'
p16
V725/G
p17
sS'id'
p18
c__builtin__
id
p19
sb.